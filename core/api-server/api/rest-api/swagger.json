{
  "openapi": "3.0.0",
  "info": {
    "title": "HKube API",
    "description": "HKube RESTful API",
    "version": "2.2.7",
    "contact": {
      "email": "hkube.dev@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "Execution",
      "description": "Execution pipelines as raw or stored"
    },
    {
      "name": "Graph",
      "description": "Query the pipeline graph"
    },
    {
      "name": "Builds",
      "description": "status, rerun and stop builds"
    },
    {
      "name": "Versions",
      "description": "Versioning for algorithms"
    },
    {
      "name": "Cron",
      "description": "Get pipelines cron result and status"
    },
    {
      "name": "DataSource",
      "description": "DataSources and their related files"
    },
    {
      "name": "GC",
      "description": "Hkube garbage collector operations"
    },
    {
      "name": "Pipelines",
      "description": "Get pipelines status and result"
    },
    {
      "name": "Pipeline Readme",
      "description": "Store readme for pipelines"
    },
    {
      "name": "Algorithm Readme",
      "description": "Store readme for algorithms"
    },
    {
      "name": "Storage",
      "description": "Query the storage"
    },
    {
      "name": "StoreAlgorithms",
      "description": "Store new algorithms, update, get and delete"
    },
    {
      "name": "StorePipelines",
      "description": "Store new pipelines, update, get and delete"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks status and result"
    }
  ],
  "externalDocs": {
    "description": "Find out more about Hkube",
    "url": "http://hkube.io"
  },
  "servers": [],
  "paths": {
    "/exec/raw": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Run raw pipeline",
        "description": "Start pipeline execution with raw input, returns jobId that can be used as a reference for the pipeline to do actions such as results/status/stop, etc.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  },
                  "kind": {
                    "type": "string",
                    "default": "batch",
                    "example": "batch",
                    "enum": [
                      "batch",
                      "stream"
                    ]
                  },
                  "experimentName": {
                    "type": "string",
                    "description": "experiment name",
                    "default": "main",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "experiment-name"
                  },
                  "description": {
                    "type": "string",
                    "description": "pipeline description"
                  },
                  "nodes": {
                    "type": "array",
                    "description": "Array of nodes",
                    "items": {
                      "type": "object",
                      "properties": {
                        "nodeName": {
                          "type": "string",
                          "description": "Unique node identifier",
                          "minLength": 1
                        },
                        "algorithmName": {
                          "type": "string",
                          "description": "Unique identifier representing a specific algorithm",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "algorithm-name"
                        },
                        "input": {
                          "type": "array",
                          "description": "The input for the algorithm",
                          "items": {},
                          "default": []
                        },
                        "ttl": {
                          "type": "integer",
                          "description": "Algorithm execution time to live in seconds. 0 to disable",
                          "minimum": 0,
                          "example": 0
                        },
                        "includeInResult": {
                          "type": "boolean"
                        },
                        "metrics": {
                          "type": "object",
                          "properties": {
                            "tensorboard": {
                              "type": "boolean",
                              "description": "Should tensorboard metrics be collected."
                            }
                          }
                        },
                        "retry": {
                          "type": "object",
                          "properties": {
                            "policy": {
                              "type": "string",
                              "default": "OnCrash",
                              "enum": [
                                "Never",
                                "Always",
                                "OnError",
                                "OnCrash"
                              ]
                            },
                            "limit": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 3,
                              "example": 1
                            }
                          }
                        },
                        "batchOperation": {
                          "type": "string",
                          "enum": [
                            "indexed",
                            "cartesian"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "default": "algorithm",
                          "enum": [
                            "algorithm",
                            "pipeline",
                            "debug",
                            "dataSource",
                            "gateway",
                            "output",
                            "hyperparamsTuner"
                          ]
                        },
                        "spec": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Unique identifier representing a specific pipeline",
                                  "minLength": 1,
                                  "format": "pipeline-name"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "snapshot": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "snapshot"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "describe the output"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for output",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "nodeName"
                      ]
                    }
                  },
                  "flowInput": {
                    "type": "object",
                    "nullable": true,
                    "description": "input object"
                  },
                  "webhooks": {
                    "type": "object",
                    "properties": {
                      "progress": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon progress",
                        "example": "http://my-url-to-progress"
                      },
                      "result": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon result",
                        "example": "http://my-url-to-result"
                      }
                    },
                    "additionalProperties": false
                  },
                  "options": {
                    "default": {},
                    "type": "object",
                    "properties": {
                      "ttl": {
                        "type": "integer",
                        "description": "pipeline time to live in seconds",
                        "minimum": 1,
                        "default": 3600,
                        "example": 3600
                      },
                      "batchTolerance": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "default": 80,
                        "example": 80
                      },
                      "concurrentPipelines": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10000,
                            "example": 1
                          },
                          "rejectOnFailure": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "additionalProperties": false
                      },
                      "progressVerbosityLevel": {
                        "type": "string",
                        "default": "info",
                        "example": "info",
                        "enum": [
                          "trace",
                          "debug",
                          "info",
                          "warn",
                          "error",
                          "critical"
                        ]
                      },
                      "debugOverride": {
                        "type": "array",
                        "description": "A list of algorithms to debug in this execution",
                        "items": {
                          "type": "string"
                        },
                        "uniqueItems": true
                      }
                    },
                    "description": "optional properties"
                  },
                  "priority": {
                    "default": 3,
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 3
                  },
                  "triggers": {
                    "type": "object",
                    "properties": {
                      "pipelines": {
                        "type": "array",
                        "description": "pipelines to activate upon result",
                        "items": {
                          "type": "string",
                          "minLength": 1
                        },
                        "uniqueItems": true
                      },
                      "cron": {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "string",
                            "description": "cron job",
                            "minLength": 1,
                            "format": "cron"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "enable or disable cron job",
                            "default": false
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "Array of tags",
                    "items": {
                      "type": "string",
                      "description": "Unique identifier representing a specific tag",
                      "minLength": 1,
                      "maxLength": 32
                    }
                  },
                  "rootJobId": {
                    "type": "string",
                    "description": "the root job id of the current tree"
                  },
                  "streaming": {
                    "type": "object",
                    "description": "streaming options",
                    "properties": {
                      "defaultFlow": {
                        "type": "string",
                        "description": "the name of the default stream flow"
                      },
                      "flows": {
                        "type": "object",
                        "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                        "example": {
                          "main": "A >> B&C | B >> D | C >> E",
                          "second": "A >> B >> C"
                        }
                      }
                    }
                  },
                  "edges": {
                    "type": "array",
                    "description": "edges define relation between nodes",
                    "items": {},
                    "example": [
                      {
                        "source": "A",
                        "target": "B"
                      }
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "an object representing all information needed for pipeline execution",
          "required": true
        },
        "responses": {
          "200": {
            "description": "pipeline execution data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    }
                  },
                  "required": [
                    "jobId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/stored": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Run stored pipeline",
        "description": "Start pipeline execution when the name of the pipeline is known, all parameters in this action will be merged with the stored pipeline and then returns jobId that can be used as a reference for the pipeline to do actions such as results/status/stop, etc.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  },
                  "kind": {
                    "type": "string",
                    "default": "batch",
                    "example": "batch",
                    "enum": [
                      "batch",
                      "stream"
                    ]
                  },
                  "experimentName": {
                    "type": "string",
                    "description": "experiment name",
                    "default": "main",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "experiment-name"
                  },
                  "description": {
                    "type": "string",
                    "description": "pipeline description"
                  },
                  "nodes": {
                    "type": "array",
                    "description": "Array of nodes",
                    "items": {
                      "type": "object",
                      "properties": {
                        "nodeName": {
                          "type": "string",
                          "description": "Unique node identifier",
                          "minLength": 1
                        },
                        "algorithmName": {
                          "type": "string",
                          "description": "Unique identifier representing a specific algorithm",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "algorithm-name"
                        },
                        "input": {
                          "type": "array",
                          "description": "The input for the algorithm",
                          "items": {},
                          "default": []
                        },
                        "ttl": {
                          "type": "integer",
                          "description": "Algorithm execution time to live in seconds. 0 to disable",
                          "minimum": 0,
                          "example": 0
                        },
                        "includeInResult": {
                          "type": "boolean"
                        },
                        "metrics": {
                          "type": "object",
                          "properties": {
                            "tensorboard": {
                              "type": "boolean",
                              "description": "Should tensorboard metrics be collected."
                            }
                          }
                        },
                        "retry": {
                          "type": "object",
                          "properties": {
                            "policy": {
                              "type": "string",
                              "default": "OnCrash",
                              "enum": [
                                "Never",
                                "Always",
                                "OnError",
                                "OnCrash"
                              ]
                            },
                            "limit": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 3,
                              "example": 1
                            }
                          }
                        },
                        "batchOperation": {
                          "type": "string",
                          "enum": [
                            "indexed",
                            "cartesian"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "default": "algorithm",
                          "enum": [
                            "algorithm",
                            "pipeline",
                            "debug",
                            "dataSource",
                            "gateway",
                            "output",
                            "hyperparamsTuner"
                          ]
                        },
                        "spec": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Unique identifier representing a specific pipeline",
                                  "minLength": 1,
                                  "format": "pipeline-name"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "snapshot": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "snapshot"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "describe the output"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for output",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "nodeName"
                      ]
                    }
                  },
                  "flowInput": {
                    "type": "object",
                    "nullable": true,
                    "description": "input object"
                  },
                  "webhooks": {
                    "type": "object",
                    "properties": {
                      "progress": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon progress",
                        "example": "http://my-url-to-progress"
                      },
                      "result": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon result",
                        "example": "http://my-url-to-result"
                      }
                    },
                    "additionalProperties": false
                  },
                  "options": {
                    "default": {},
                    "type": "object",
                    "properties": {
                      "ttl": {
                        "type": "integer",
                        "description": "pipeline time to live in seconds",
                        "minimum": 1,
                        "default": 3600,
                        "example": 3600
                      },
                      "batchTolerance": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "default": 80,
                        "example": 80
                      },
                      "concurrentPipelines": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10000,
                            "example": 1
                          },
                          "rejectOnFailure": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "additionalProperties": false
                      },
                      "progressVerbosityLevel": {
                        "type": "string",
                        "default": "info",
                        "example": "info",
                        "enum": [
                          "trace",
                          "debug",
                          "info",
                          "warn",
                          "error",
                          "critical"
                        ]
                      },
                      "debugOverride": {
                        "type": "array",
                        "description": "A list of algorithms to debug in this execution",
                        "items": {
                          "type": "string"
                        },
                        "uniqueItems": true
                      }
                    },
                    "description": "optional properties"
                  },
                  "priority": {
                    "default": 3,
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 3
                  },
                  "triggers": {
                    "type": "object",
                    "properties": {
                      "pipelines": {
                        "type": "array",
                        "description": "pipelines to activate upon result",
                        "items": {
                          "type": "string",
                          "minLength": 1
                        },
                        "uniqueItems": true
                      },
                      "cron": {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "string",
                            "description": "cron job",
                            "minLength": 1,
                            "format": "cron"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "enable or disable cron job",
                            "default": false
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "Array of tags",
                    "items": {
                      "type": "string",
                      "description": "Unique identifier representing a specific tag",
                      "minLength": 1,
                      "maxLength": 32
                    }
                  },
                  "rootJobId": {
                    "type": "string",
                    "description": "the root job id of the current tree"
                  },
                  "streaming": {
                    "type": "object",
                    "description": "streaming options",
                    "properties": {
                      "defaultFlow": {
                        "type": "string",
                        "description": "the name of the default stream flow"
                      },
                      "flows": {
                        "type": "object",
                        "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                        "example": {
                          "main": "A >> B&C | B >> D | C >> E",
                          "second": "A >> B >> C"
                        }
                      }
                    }
                  },
                  "edges": {
                    "type": "array",
                    "description": "edges define relation between nodes",
                    "items": {},
                    "example": [
                      {
                        "source": "A",
                        "target": "B"
                      }
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "an object representing all information needed for stored pipeline execution",
          "required": true
        },
        "responses": {
          "200": {
            "description": "pipeline execution data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    }
                  },
                  "required": [
                    "jobId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/caching": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Run job from a specific node",
        "description": "the api allows you to run job from current node and getting the data of the predecessors from caching of the previous run",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobId": {
                    "type": "string",
                    "description": "Unique identifier representing pipeline execution"
                  },
                  "nodeName": {
                    "type": "string",
                    "description": "Unique node identifier",
                    "minLength": 1
                  },
                  "debug": {
                    "type": "boolean",
                    "description": "Run as debug"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "jobId",
                  "nodeName"
                ]
              }
            }
          },
          "description": "an object representing all information needed for stored pipeline execution",
          "required": true
        },
        "responses": {
          "200": {
            "description": "pipeline execution data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    }
                  },
                  "required": [
                    "jobId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "node Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/algorithm": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Run algorithm",
        "description": "Start execution for single algorithm.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific algorithm",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "algorithm-name"
                  },
                  "input": {
                    "type": "array",
                    "description": "The input for the algorithm",
                    "items": {},
                    "default": []
                  },
                  "debug": {
                    "type": "boolean",
                    "description": "Is debug algorithm",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "an object representing all information needed for algorithm execution request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "pipeline execution data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    }
                  },
                  "required": [
                    "jobId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/rerun": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Rerun pipeline",
        "description": "Rerun pipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobId": {
                    "type": "string",
                    "description": "Unique identifier representing pipeline execution"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "jobId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "pipeline execution data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    }
                  },
                  "required": [
                    "jobId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/stop": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Stop pipeline",
        "description": "Call to stop pipeline execution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobId": {
                    "type": "string",
                    "description": "Unique identifier representing pipeline execution"
                  },
                  "reason": {
                    "type": "string",
                    "default": "requested by user",
                    "description": "reason for stop pipeline"
                  }
                },
                "required": [
                  "jobId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the OK string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/pause": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Pause pipeline",
        "description": "Call to pause pipeline execution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobId": {
                    "type": "string",
                    "description": "Unique identifier representing pipeline execution"
                  }
                },
                "required": [
                  "jobId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the OK string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/resume": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Resume pipeline",
        "description": "Call to resume pipeline execution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobId": {
                    "type": "string",
                    "description": "Unique identifier representing pipeline execution"
                  }
                },
                "required": [
                  "jobId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the OK string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/search": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Search jobs",
        "description": "Search jobs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "experimentName": {
                        "type": "string"
                      },
                      "pipelineName": {
                        "type": "string"
                      },
                      "pipelineType": {
                        "type": "string"
                      },
                      "algorithmName": {
                        "type": "string"
                      },
                      "pipelineStatus": {
                        "type": "string"
                      },
                      "datesRange": {
                        "type": "object",
                        "properties": {
                          "from": {
                            "type": "string",
                            "example": "2021-03-11T14:30:00"
                          },
                          "to": {
                            "type": "string",
                            "example": "2021-03-11T14:30:00"
                          }
                        }
                      }
                    }
                  },
                  "cursor": {
                    "type": "string",
                    "description": "get the next results starting from this cursor"
                  },
                  "pageNum": {
                    "type": "integer",
                    "description": "get the next results starting from this page number"
                  },
                  "sort": {
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "desc"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100,
                    "default": 100,
                    "example": 100,
                    "description": "limit the result size"
                  },
                  "fields": {
                    "type": "object",
                    "description": "select which fields to return"
                  },
                  "exists": {
                    "type": "object",
                    "description": "only return records that has fields"
                  }
                },
                "example": {
                  "query": {
                    "datesRange": {
                      "from": "2021-05-22T15:00:00",
                      "to": "2021-06-22T16:00:00"
                    },
                    "experimentName": "main",
                    "pipelineName": "simple",
                    "pipelineType": "stored",
                    "algorithmName": "green-alg",
                    "pipelineStatus": "completed"
                  },
                  "sort": "desc",
                  "pageNum": 1,
                  "limit": 2,
                  "fields": {
                    "jobId": true
                  }
                }
              }
            }
          },
          "description": "jobs search specification",
          "required": true
        },
        "responses": {
          "200": {
            "description": "search jobs response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hits": {
                      "type": "array",
                      "description": "the actual result records",
                      "items": {}
                    },
                    "cursor": {
                      "type": "string",
                      "description": "this cursor to the next query can be used for pagination"
                    },
                    "timeTook": {
                      "type": "string",
                      "description": "the query completion time took in milliseconds"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Search jobs",
        "description": "Search jobs",
        "parameters": [
          {
            "name": "experimentName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "algorithmName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineStatus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "example": "2021-05-22T15:00:00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "example": "2021-06-22T16:00:00",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "example": "asc,desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "example": "result:false, pipeline:false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exists",
            "in": "query",
            "example": "result:true, pipeline:false",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search jobs response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hits": {
                      "type": "array",
                      "description": "the actual result records",
                      "items": {}
                    },
                    "cursor": {
                      "type": "string",
                      "description": "this cursor to the next query can be used for pagination"
                    },
                    "timeTook": {
                      "type": "string",
                      "description": "the query completion time took in milliseconds"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/pipelines/{jobId}": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Get pipeline data",
        "description": "Returns the executed pipeline data",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing pipeline execution",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pipeline data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "kind": {
                      "type": "string",
                      "default": "batch",
                      "example": "batch",
                      "enum": [
                        "batch",
                        "stream"
                      ]
                    },
                    "experimentName": {
                      "type": "string",
                      "description": "experiment name",
                      "default": "main",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "experiment-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "pipeline description"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Array of nodes",
                      "items": {
                        "type": "object",
                        "properties": {
                          "nodeName": {
                            "type": "string",
                            "description": "Unique node identifier",
                            "minLength": 1
                          },
                          "algorithmName": {
                            "type": "string",
                            "description": "Unique identifier representing a specific algorithm",
                            "minLength": 1,
                            "maxLength": 32,
                            "format": "algorithm-name"
                          },
                          "input": {
                            "type": "array",
                            "description": "The input for the algorithm",
                            "items": {},
                            "default": []
                          },
                          "ttl": {
                            "type": "integer",
                            "description": "Algorithm execution time to live in seconds. 0 to disable",
                            "minimum": 0,
                            "example": 0
                          },
                          "includeInResult": {
                            "type": "boolean"
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "tensorboard": {
                                "type": "boolean",
                                "description": "Should tensorboard metrics be collected."
                              }
                            }
                          },
                          "retry": {
                            "type": "object",
                            "properties": {
                              "policy": {
                                "type": "string",
                                "default": "OnCrash",
                                "enum": [
                                  "Never",
                                  "Always",
                                  "OnError",
                                  "OnCrash"
                                ]
                              },
                              "limit": {
                                "type": "integer",
                                "minimum": 1,
                                "default": 3,
                                "example": 1
                              }
                            }
                          },
                          "batchOperation": {
                            "type": "string",
                            "enum": [
                              "indexed",
                              "cartesian"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "default": "algorithm",
                            "enum": [
                              "algorithm",
                              "pipeline",
                              "debug",
                              "dataSource",
                              "gateway",
                              "output",
                              "hyperparamsTuner"
                            ]
                          },
                          "spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Unique identifier representing a specific pipeline",
                                    "minLength": 1,
                                    "format": "pipeline-name"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "snapshot": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "name",
                                  "snapshot"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "describe the output"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for output",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "nodeName"
                        ]
                      }
                    },
                    "flowInput": {
                      "type": "object",
                      "nullable": true,
                      "description": "input object"
                    },
                    "webhooks": {
                      "type": "object",
                      "properties": {
                        "progress": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon progress",
                          "example": "http://my-url-to-progress"
                        },
                        "result": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon result",
                          "example": "http://my-url-to-result"
                        }
                      },
                      "additionalProperties": false
                    },
                    "options": {
                      "default": {},
                      "type": "object",
                      "properties": {
                        "ttl": {
                          "type": "integer",
                          "description": "pipeline time to live in seconds",
                          "minimum": 1,
                          "default": 3600,
                          "example": 3600
                        },
                        "batchTolerance": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 100,
                          "default": 80,
                          "example": 80
                        },
                        "concurrentPipelines": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 10000,
                              "example": 1
                            },
                            "rejectOnFailure": {
                              "type": "boolean",
                              "default": true
                            }
                          },
                          "additionalProperties": false
                        },
                        "progressVerbosityLevel": {
                          "type": "string",
                          "default": "info",
                          "example": "info",
                          "enum": [
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error",
                            "critical"
                          ]
                        },
                        "debugOverride": {
                          "type": "array",
                          "description": "A list of algorithms to debug in this execution",
                          "items": {
                            "type": "string"
                          },
                          "uniqueItems": true
                        }
                      },
                      "description": "optional properties"
                    },
                    "priority": {
                      "default": 3,
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 5,
                      "example": 3
                    },
                    "triggers": {
                      "type": "object",
                      "properties": {
                        "pipelines": {
                          "type": "array",
                          "description": "pipelines to activate upon result",
                          "items": {
                            "type": "string",
                            "minLength": 1
                          },
                          "uniqueItems": true
                        },
                        "cron": {
                          "type": "object",
                          "properties": {
                            "pattern": {
                              "type": "string",
                              "description": "cron job",
                              "minLength": 1,
                              "format": "cron"
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "enable or disable cron job",
                              "default": false
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "Array of tags",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "rootJobId": {
                      "type": "string",
                      "description": "the root job id of the current tree"
                    },
                    "streaming": {
                      "type": "object",
                      "description": "streaming options",
                      "properties": {
                        "defaultFlow": {
                          "type": "string",
                          "description": "the name of the default stream flow"
                        },
                        "flows": {
                          "type": "object",
                          "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                          "example": {
                            "main": "A >> B&C | B >> D | C >> E",
                            "second": "A >> B >> C"
                          }
                        }
                      }
                    },
                    "edges": {
                      "type": "array",
                      "description": "edges define relation between nodes",
                      "items": {},
                      "example": [
                        {
                          "source": "A",
                          "target": "B"
                        }
                      ]
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/pipeline/list": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Get current running pipelines",
        "description": "Returns the current running pipelines data",
        "responses": {
          "200": {
            "description": "pipeline data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "kind": {
                      "type": "string",
                      "default": "batch",
                      "example": "batch",
                      "enum": [
                        "batch",
                        "stream"
                      ]
                    },
                    "experimentName": {
                      "type": "string",
                      "description": "experiment name",
                      "default": "main",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "experiment-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "pipeline description"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Array of nodes",
                      "items": {
                        "type": "object",
                        "properties": {
                          "nodeName": {
                            "type": "string",
                            "description": "Unique node identifier",
                            "minLength": 1
                          },
                          "algorithmName": {
                            "type": "string",
                            "description": "Unique identifier representing a specific algorithm",
                            "minLength": 1,
                            "maxLength": 32,
                            "format": "algorithm-name"
                          },
                          "input": {
                            "type": "array",
                            "description": "The input for the algorithm",
                            "items": {},
                            "default": []
                          },
                          "ttl": {
                            "type": "integer",
                            "description": "Algorithm execution time to live in seconds. 0 to disable",
                            "minimum": 0,
                            "example": 0
                          },
                          "includeInResult": {
                            "type": "boolean"
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "tensorboard": {
                                "type": "boolean",
                                "description": "Should tensorboard metrics be collected."
                              }
                            }
                          },
                          "retry": {
                            "type": "object",
                            "properties": {
                              "policy": {
                                "type": "string",
                                "default": "OnCrash",
                                "enum": [
                                  "Never",
                                  "Always",
                                  "OnError",
                                  "OnCrash"
                                ]
                              },
                              "limit": {
                                "type": "integer",
                                "minimum": 1,
                                "default": 3,
                                "example": 1
                              }
                            }
                          },
                          "batchOperation": {
                            "type": "string",
                            "enum": [
                              "indexed",
                              "cartesian"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "default": "algorithm",
                            "enum": [
                              "algorithm",
                              "pipeline",
                              "debug",
                              "dataSource",
                              "gateway",
                              "output",
                              "hyperparamsTuner"
                            ]
                          },
                          "spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Unique identifier representing a specific pipeline",
                                    "minLength": 1,
                                    "format": "pipeline-name"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "snapshot": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "name",
                                  "snapshot"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "describe the output"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for output",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "nodeName"
                        ]
                      }
                    },
                    "flowInput": {
                      "type": "object",
                      "nullable": true,
                      "description": "input object"
                    },
                    "webhooks": {
                      "type": "object",
                      "properties": {
                        "progress": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon progress",
                          "example": "http://my-url-to-progress"
                        },
                        "result": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon result",
                          "example": "http://my-url-to-result"
                        }
                      },
                      "additionalProperties": false
                    },
                    "options": {
                      "default": {},
                      "type": "object",
                      "properties": {
                        "ttl": {
                          "type": "integer",
                          "description": "pipeline time to live in seconds",
                          "minimum": 1,
                          "default": 3600,
                          "example": 3600
                        },
                        "batchTolerance": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 100,
                          "default": 80,
                          "example": 80
                        },
                        "concurrentPipelines": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 10000,
                              "example": 1
                            },
                            "rejectOnFailure": {
                              "type": "boolean",
                              "default": true
                            }
                          },
                          "additionalProperties": false
                        },
                        "progressVerbosityLevel": {
                          "type": "string",
                          "default": "info",
                          "example": "info",
                          "enum": [
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error",
                            "critical"
                          ]
                        },
                        "debugOverride": {
                          "type": "array",
                          "description": "A list of algorithms to debug in this execution",
                          "items": {
                            "type": "string"
                          },
                          "uniqueItems": true
                        }
                      },
                      "description": "optional properties"
                    },
                    "priority": {
                      "default": 3,
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 5,
                      "example": 3
                    },
                    "triggers": {
                      "type": "object",
                      "properties": {
                        "pipelines": {
                          "type": "array",
                          "description": "pipelines to activate upon result",
                          "items": {
                            "type": "string",
                            "minLength": 1
                          },
                          "uniqueItems": true
                        },
                        "cron": {
                          "type": "object",
                          "properties": {
                            "pattern": {
                              "type": "string",
                              "description": "cron job",
                              "minLength": 1,
                              "format": "cron"
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "enable or disable cron job",
                              "default": false
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "Array of tags",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "rootJobId": {
                      "type": "string",
                      "description": "the root job id of the current tree"
                    },
                    "streaming": {
                      "type": "object",
                      "description": "streaming options",
                      "properties": {
                        "defaultFlow": {
                          "type": "string",
                          "description": "the name of the default stream flow"
                        },
                        "flows": {
                          "type": "object",
                          "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                          "example": {
                            "main": "A >> B&C | B >> D | C >> E",
                            "second": "A >> B >> C"
                          }
                        }
                      }
                    },
                    "edges": {
                      "type": "array",
                      "description": "edges define relation between nodes",
                      "items": {},
                      "example": [
                        {
                          "source": "A",
                          "target": "B"
                        }
                      ]
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/status/{jobId}": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Get pipeline status",
        "description": "Returns a status for the current pipeline.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing pipeline execution",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pipeline result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "pipeline": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {}
                    },
                    "status": {
                      "type": "string"
                    },
                    "timeTook": {
                      "type": "number"
                    },
                    "storageModule": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/results/{jobId}": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Get pipeline result",
        "description": "returns result for the execution of a specific pipeline run. if called before result is determined - returns error.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing workflow execution - is given in response to calling pipeline run method .",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "pipeline": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {}
                    },
                    "status": {
                      "type": "string"
                    },
                    "timeTook": {
                      "type": "number"
                    },
                    "storageModule": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exec/tree/{jobId}": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Pipeline execution tree",
        "description": "Returns a tree of pipelines, usually a triggered pipelines",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing pipeline execution",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pipeline tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Pipeline name"
                      },
                      "jobId": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pipelines/results": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Get stored pipeline results",
        "description": "return results of stored pipelines by given pipeline name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "pipeline name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "experimentName",
            "in": "query",
            "description": "experiment name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jobId": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "pipeline": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {}
                      },
                      "status": {
                        "type": "string"
                      },
                      "timeTook": {
                        "type": "number"
                      },
                      "storageModule": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipelines Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pipelines/status": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Get pipeline status",
        "description": "return status of pipelines by given pipeline name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "pipeline name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "experimentName",
            "in": "query",
            "description": "experiment name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jobId": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "pipeline": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {}
                      },
                      "status": {
                        "type": "string"
                      },
                      "timeTook": {
                        "type": "number"
                      },
                      "storageModule": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipelines Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pipelines/triggers/tree": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Get pipelines triggers",
        "description": "Get tree of pipelines triggers by given name or for all pipelines",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "pipeline name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Pipeline name"
                        },
                        "children": {
                          "type": "array",
                          "items": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipelines Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cron/results": {
      "get": {
        "tags": [
          "Cron"
        ],
        "summary": "Get pipeline cron result",
        "description": "return cron results by given pipeline name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "pipeline name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "experimentName",
            "in": "query",
            "description": "experiment name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jobId": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "pipeline": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {}
                      },
                      "status": {
                        "type": "string"
                      },
                      "timeTook": {
                        "type": "number"
                      },
                      "storageModule": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "results Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cron/status": {
      "get": {
        "tags": [
          "Cron"
        ],
        "summary": "Get pipeline cron status",
        "description": "return cron status by given pipeline name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "pipeline name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "experimentName",
            "in": "query",
            "description": "experiment name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jobId": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "pipeline": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {}
                      },
                      "status": {
                        "type": "string"
                      },
                      "timeTook": {
                        "type": "number"
                      },
                      "storageModule": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "status Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cron/list": {
      "get": {
        "tags": [
          "Cron"
        ],
        "summary": "Get cron list",
        "description": "return cron list of all stored pipeline",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jobId": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "pipeline": {
                        "type": "string"
                      },
                      "data": {
                        "type": "array",
                        "items": {}
                      },
                      "status": {
                        "type": "string"
                      },
                      "timeTook": {
                        "type": "number"
                      },
                      "storageModule": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "cron Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cron/start": {
      "post": {
        "tags": [
          "Cron"
        ],
        "summary": "Start cron",
        "description": "Start cron by given pipeline name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  },
                  "pattern": {
                    "type": "string",
                    "description": "cron job",
                    "minLength": 1,
                    "format": "cron"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cron/stop": {
      "post": {
        "tags": [
          "Cron"
        ],
        "summary": "Stop cron",
        "description": "Stop cron by given pipeline name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  },
                  "pattern": {
                    "type": "string",
                    "description": "cron job",
                    "minLength": 1,
                    "format": "cron"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasource": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Fetch all dataSources meta data",
        "responses": {
          "200": {
            "description": "A collection of dataSources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24
                      },
                      "name": {
                        "type": "string",
                        "description": "Unique identifier representing a specific dataSource",
                        "minLength": 1,
                        "maxLength": 32,
                        "format": "dataSource-name"
                      },
                      "versionDescription": {
                        "type": "string",
                        "minLength": 1
                      },
                      "filesCount": {
                        "type": "number"
                      },
                      "avgFileSize": {
                        "type": "string"
                      },
                      "totalSize": {
                        "type": "number"
                      },
                      "fileTypes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Create a new dataSource and upload a file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific dataSource",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "dataSource-name"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Data file (file types: *)",
                      "format": "binary"
                    }
                  },
                  "storage": {
                    "type": "object",
                    "description": "Contains the credentials and storage information of \nan S3 bucket, If kind is set to \"internal\" \nno other parameters are required\n",
                    "oneOf": [
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "S3"
                            ]
                          },
                          "accessKeyId": {
                            "type": "string"
                          },
                          "secretAccessKey": {
                            "type": "string"
                          },
                          "endpoint": {
                            "type": "string",
                            "minLength": 1,
                            "format": "url"
                          },
                          "bucketName": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind",
                          "accessKeyId",
                          "secretAccessKey",
                          "endpoint",
                          "bucketName"
                        ]
                      },
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "internal"
                            ]
                          }
                        },
                        "required": [
                          "kind"
                        ]
                      }
                    ]
                  },
                  "git": {
                    "type": "object",
                    "description": "Contains the credentials and Git information,\nIf kind is set to \"internal\" \nno other parameters are required\n",
                    "oneOf": [
                      {
                        "properties": {
                          "repositoryUrl": {
                            "description": "provide a url to an empty git repository",
                            "type": "string",
                            "minLength": 1,
                            "format": "git-url"
                          },
                          "token": {
                            "type": "string"
                          },
                          "tokenName": {
                            "description": "the token name is *required* when using a *gitlab* account",
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "github",
                              "gitlab"
                            ]
                          }
                        },
                        "required": [
                          "repositoryUrl",
                          "token",
                          "kind"
                        ]
                      },
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "internal"
                            ]
                          }
                        },
                        "required": [
                          "kind"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "name",
                  "files",
                  "storage",
                  "git"
                ]
              }
            }
          },
          "description": "DataSource name and file to upload",
          "required": true
        },
        "responses": {
          "201": {
            "description": "created dataSource",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24
                        },
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific dataSource",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "dataSource-name"
                        },
                        "versionDescription": {
                          "type": "string",
                          "minLength": 1
                        },
                        "filesCount": {
                          "type": "number"
                        },
                        "avgFileSize": {
                          "type": "string"
                        },
                        "totalSize": {
                          "type": "number"
                        },
                        "fileTypes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "commitHash": {
                          "description": "a commit hash",
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific dataSource",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "dataSource-name"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "size": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "uploadedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "path"
                            ]
                          }
                        },
                        "versionDescription": {
                          "description": "a commit message supplied by the user",
                          "type": "string"
                        },
                        "gitRepositoryUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "id"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasource/{name}": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Fetch a single dataSource by name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "request a specific version, if not stated the latest is returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A datasource item",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "commitHash": {
                          "description": "a commit hash",
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific dataSource",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "dataSource-name"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "size": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "uploadedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "path"
                            ]
                          }
                        },
                        "versionDescription": {
                          "description": "a commit message supplied by the user",
                          "type": "string"
                        },
                        "gitRepositoryUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "id"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "size": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "uploadedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "path"
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "upload a new file to a given datasource",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "versionDescription": {
                    "type": "string",
                    "minLength": 1
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Data file (file types: *)",
                      "format": "binary"
                    }
                  },
                  "droppedFileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mapping": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "path": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "uploadedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "path"
                      ]
                    }
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "versionDescription",
                      "filesDropped"
                    ]
                  },
                  {
                    "required": [
                      "versionDescription",
                      "files"
                    ]
                  }
                ]
              }
            }
          },
          "description": "DataSource name and file to upload",
          "required": true
        },
        "responses": {
          "201": {
            "description": "new datasource version",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24
                        },
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific dataSource",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "dataSource-name"
                        },
                        "versionDescription": {
                          "type": "string",
                          "minLength": 1
                        },
                        "filesCount": {
                          "type": "number"
                        },
                        "avgFileSize": {
                          "type": "string"
                        },
                        "totalSize": {
                          "type": "number"
                        },
                        "fileTypes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "commitHash": {
                          "description": "a commit hash",
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific dataSource",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "dataSource-name"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "size": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "uploadedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "path"
                            ]
                          }
                        },
                        "versionDescription": {
                          "description": "a commit message supplied by the user",
                          "type": "string"
                        },
                        "gitRepositoryUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "id"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataSource"
        ],
        "summary": "delete a datasource by name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted the datasource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "string",
                      "description": "a delete acknowledgement"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasource/{name}/versions": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "list a all the versions of a given dataSource name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A datasource item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 24,
                        "maxLength": 24
                      },
                      "versionDescription": {
                        "type": "string",
                        "minLength": 1
                      },
                      "commitHash": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasource/{name}/sync": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "sync a version from git to the database",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "DataSource name",
          "required": true
        },
        "responses": {
          "201": {
            "description": "new datasource version",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 24,
                          "maxLength": 24
                        },
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific dataSource",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "dataSource-name"
                        },
                        "versionDescription": {
                          "type": "string",
                          "minLength": 1
                        },
                        "filesCount": {
                          "type": "number"
                        },
                        "avgFileSize": {
                          "type": "string"
                        },
                        "totalSize": {
                          "type": "number"
                        },
                        "fileTypes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "commitHash": {
                          "description": "a commit hash",
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific dataSource",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "dataSource-name"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "size": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "uploadedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "path"
                            ]
                          }
                        },
                        "versionDescription": {
                          "description": "a commit message supplied by the user",
                          "type": "string"
                        },
                        "gitRepositoryUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "id"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/datasource/id/{id}/snapshot": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "create a new snapshot for a given datasource version",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A datasource id (indicating a version)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "snapshot": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 25
                      },
                      "query": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A newly created snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "snapshot": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 25
                            },
                            "query": {
                              "type": "string",
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "required": [
                        "name",
                        "query"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 25
                        },
                        "dataSource": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "description": "Unique identifier representing a specific dataSource",
                              "minLength": 1,
                              "maxLength": 32,
                              "format": "dataSource-name"
                            },
                            "filteredFilesList": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "size": {
                                    "type": "number"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "uploadedAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "path"
                                ]
                              }
                            },
                            "droppedFiles": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "size": {
                                    "type": "number"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "uploadedAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "path"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/datasource/id/{id}/snapshot/preview": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "post a query for *preview only*,\nthe results are NOT persisted to the database\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A datasource id (indicating a version)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "a list of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "size": {
                        "type": "number"
                      },
                      "type": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "uploadedAt": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "path"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasource/{name}/snapshot": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "create a new snapshot for a given datasource version",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "snapshot": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 25
                      },
                      "query": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A newly created snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "snapshot": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 25
                            },
                            "query": {
                              "type": "string",
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "required": [
                        "name",
                        "query"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "minLength": 25
                        },
                        "dataSource": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "minLength": 24,
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "description": "Unique identifier representing a specific dataSource",
                              "minLength": 1,
                              "maxLength": 32,
                              "format": "dataSource-name"
                            },
                            "filteredFilesList": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "size": {
                                    "type": "number"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "uploadedAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "path"
                                ]
                              }
                            },
                            "droppedFiles": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "size": {
                                    "type": "number"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "uploadedAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "path"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "fetch all snapshots for a given datasource",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "snapshot": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 25
                              },
                              "query": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          }
                        },
                        "required": [
                          "name",
                          "query"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 25
                          },
                          "dataSource": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "minLength": 24,
                                "maxLength": 24
                              },
                              "name": {
                                "type": "string",
                                "description": "Unique identifier representing a specific dataSource",
                                "minLength": 1,
                                "maxLength": 32,
                                "format": "dataSource-name"
                              },
                              "filteredFilesList": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "path": {
                                      "type": "string"
                                    },
                                    "size": {
                                      "type": "number"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "uploadedAt": {
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "path"
                                  ]
                                }
                              },
                              "droppedFiles": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "path": {
                                      "type": "string"
                                    },
                                    "size": {
                                      "type": "number"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "uploadedAt": {
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "path"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasource/{name}/credentials": {
      "patch": {
        "tags": [
          "DataSource"
        ],
        "summary": "update the credentials for the git repository and the storage\nupdates throughout the entire version history of a dataSource by its name\n",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "git": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "type": "string"
                      },
                      "tokenName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "token"
                    ]
                  },
                  "storage": {
                    "type": "object",
                    "properties": {
                      "accessKeyId": {
                        "type": "string"
                      },
                      "secretAccessKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "accessKeyId",
                      "secretAccessKey"
                    ]
                  }
                }
              }
            }
          },
          "description": "New credentials to update"
        },
        "responses": {
          "201": {
            "description": "number of versions updated with the new credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updatedCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasource/{name}/snapshot/{snapshotName}": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "fetch snapshots for a given datasource",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "A dataSource name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snapshotName",
            "in": "path",
            "description": "A Snapshot name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolve",
            "in": "query",
            "description": "return the entire dataSource with the snapshot",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "dataSource": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "snapshot": {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "snapshot": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 25
                                    },
                                    "query": {
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "query"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "minLength": 25
                                },
                                "dataSource": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "minLength": 24,
                                      "maxLength": 24
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Unique identifier representing a specific dataSource",
                                      "minLength": 1,
                                      "maxLength": 32,
                                      "format": "dataSource-name"
                                    },
                                    "filteredFilesList": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "path": {
                                            "type": "string"
                                          },
                                          "size": {
                                            "type": "number"
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "uploadedAt": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "name",
                                          "path"
                                        ]
                                      }
                                    },
                                    "droppedFiles": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "path": {
                                            "type": "string"
                                          },
                                          "size": {
                                            "type": "number"
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "uploadedAt": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "name",
                                          "path"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 25
                        },
                        "query": {
                          "type": "string",
                          "minLength": 1
                        },
                        "dataSource": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "commitHash": {
                              "description": "a commit hash",
                              "type": "string"
                            },
                            "name": {
                              "type": "string",
                              "description": "Unique identifier representing a specific dataSource",
                              "minLength": 1,
                              "maxLength": 32,
                              "format": "dataSource-name"
                            },
                            "files": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "size": {
                                    "type": "number"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "uploadedAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "path"
                                ]
                              }
                            },
                            "versionDescription": {
                              "description": "a commit message supplied by the user",
                              "type": "string"
                            },
                            "gitRepositoryUrl": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "id"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/datasource/id/{id}/download": {
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "create download link",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A datasource id (indicating a version)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "description": "a list of file ids to include in the generated zip file",
          "required": true
        },
        "responses": {
          "201": {
            "description": "A Zip file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "download an archive of the selected files",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A datasource id (indicating a version)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier representing a downloadId",
              "minLength": 4,
              "maxLength": 4,
              "format": "download-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Zip file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/datasource/validate": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Fetch all dataSources meta data",
        "parameters": [
          {
            "name": "datasource_name",
            "in": "query",
            "description": "a datasource name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snapshot_name",
            "in": "query",
            "description": "A Snapshot name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "request a specific version, if not stated the latest is returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ensure a datasource exists by name, version or snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/store/algorithms/{name}": {
      "get": {
        "tags": [
          "StoreAlgorithms"
        ],
        "summary": "Get algorithm",
        "description": "get specific algorithm from store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique identifier representing a specific algorithm",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "algorithm-name"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "batch",
                        "stream"
                      ]
                    },
                    "env": {
                      "type": "string",
                      "enum": [
                        "nodejs",
                        "python",
                        "java"
                      ]
                    },
                    "algorithmImage": {
                      "type": "string",
                      "description": "image name as in the docker registry",
                      "format": "algorithm-image"
                    },
                    "cpu": {
                      "type": "number",
                      "default": 0.1,
                      "minimum": 0,
                      "description": "algorithm cpu"
                    },
                    "gpu": {
                      "type": "number",
                      "minimum": 0,
                      "description": "algorithm gpu"
                    },
                    "mem": {
                      "type": "string",
                      "description": "algorithm memory",
                      "format": "algorithm-memory",
                      "default": "256Mi",
                      "example": "512Mi"
                    },
                    "reservedMemory": {
                      "type": "string",
                      "nullable": true,
                      "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                      "format": "memory",
                      "example": "512Mi"
                    },
                    "options": {
                      "type": "object",
                      "properties": {
                        "devMode": {
                          "type": "boolean",
                          "description": "runs algorithm with mounted sources to allow rapid development cycles"
                        },
                        "pending": {
                          "type": "boolean",
                          "description": "pending algorithm",
                          "default": false
                        },
                        "opengl": {
                          "type": "boolean",
                          "description": "should algorithm support XGL context creation (mount X socket)"
                        }
                      },
                      "default": {}
                    },
                    "version": {
                      "type": "string",
                      "description": "Hkube's auto increment semantic versioning",
                      "readOnly": true
                    },
                    "mounts": {
                      "type": "array",
                      "nullable": true,
                      "description": "a list of volumes to mount into the algorithm",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pvcName": {
                            "type": "string",
                            "format": "algorithm-mount-pvc",
                            "minLength": 1,
                            "description": "name of an existing kubernetes pvc (persistent volume claim)"
                          },
                          "path": {
                            "type": "string",
                            "format": "path",
                            "minLength": 1,
                            "description": "the mount path in the algorithm container"
                          },
                          "volumeType": {
                            "type": "string",
                            "description": "Special volume types such as emptyDir",
                            "enum": [
                              "emptyDir",
                              "configMap"
                            ]
                          }
                        },
                        "required": [
                          "pvcName",
                          "path"
                        ]
                      },
                      "uniqueItems": true,
                      "example": []
                    },
                    "gitRepository": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "a url for the git repository",
                          "format": "url"
                        },
                        "commit": {
                          "type": "object",
                          "description": "commit details",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "commit id"
                            },
                            "timestamp": {
                              "type": "string",
                              "description": "commit time"
                            },
                            "message": {
                              "type": "string",
                              "description": "commit message"
                            }
                          },
                          "required": [
                            "id"
                          ]
                        },
                        "branchName": {
                          "type": "string",
                          "default": "master",
                          "description": "the branch name you wish to create a build from"
                        },
                        "tag": {
                          "type": "string",
                          "description": "a specific tag which will trigger the build"
                        },
                        "token": {
                          "type": "string",
                          "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                        },
                        "gitKind": {
                          "type": "string",
                          "enum": [
                            "github",
                            "gitlab"
                          ],
                          "default": "github"
                        }
                      },
                      "required": [
                        "url"
                      ]
                    },
                    "entryPoint": {
                      "type": "string",
                      "nullable": true
                    },
                    "dependencyInstallCmd": {
                      "type": "string",
                      "nullable": true,
                      "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                    },
                    "baseImage": {
                      "type": "string",
                      "nullable": true,
                      "description": "Custom docker image to be used as base to the newly built algorithm image"
                    },
                    "minHotWorkers": {
                      "type": "integer",
                      "description": "how many live algorithm instances will always run",
                      "minimum": 0,
                      "default": 0
                    },
                    "maxWorkers": {
                      "type": "integer",
                      "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                      "minimum": 0,
                      "nullable": true
                    },
                    "quotaGuarantee": {
                      "type": "integer",
                      "nullable": true,
                      "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                      "minimum": 0
                    },
                    "algorithmEnv": {
                      "type": "object",
                      "nullable": true,
                      "description": "key value environment variables for algorithm"
                    },
                    "workerEnv": {
                      "type": "object",
                      "nullable": true,
                      "description": "key value environment variables for worker"
                    },
                    "nodeSelector": {
                      "type": "object",
                      "nullable": true,
                      "description": "key value labels for nodes constraint",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "labels": {
                      "type": "object",
                      "nullable": true,
                      "description": "attach key value metadata to algorithm pod, usually for users"
                    },
                    "annotations": {
                      "type": "object",
                      "nullable": true,
                      "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                    },
                    "streamKind": {
                      "enum": [
                        "stateless",
                        "stateful"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "description": "type of algorithm code resource",
                      "enum": [
                        "Git",
                        "Code",
                        "Image"
                      ],
                      "default": "Image"
                    },
                    "downloadFileExt": {
                      "type": "string",
                      "nullable": true,
                      "description": "the extension name that will be attached to a file when downloading algorithm result"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StoreAlgorithms"
        ],
        "summary": "Delete algorithm",
        "description": "Delete existing algorithm from store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "should also delete all related data, e.g. pipelines, builds, versions.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/store/algorithms": {
      "get": {
        "tags": [
          "StoreAlgorithms"
        ],
        "summary": "Get all algorithms",
        "description": "Get all available algorithms from store",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique identifier representing a specific algorithm",
                        "minLength": 1,
                        "maxLength": 32,
                        "format": "algorithm-name"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "batch",
                          "stream"
                        ]
                      },
                      "env": {
                        "type": "string",
                        "enum": [
                          "nodejs",
                          "python",
                          "java"
                        ]
                      },
                      "algorithmImage": {
                        "type": "string",
                        "description": "image name as in the docker registry",
                        "format": "algorithm-image"
                      },
                      "cpu": {
                        "type": "number",
                        "default": 0.1,
                        "minimum": 0,
                        "description": "algorithm cpu"
                      },
                      "gpu": {
                        "type": "number",
                        "minimum": 0,
                        "description": "algorithm gpu"
                      },
                      "mem": {
                        "type": "string",
                        "description": "algorithm memory",
                        "format": "algorithm-memory",
                        "default": "256Mi",
                        "example": "512Mi"
                      },
                      "reservedMemory": {
                        "type": "string",
                        "nullable": true,
                        "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                        "format": "memory",
                        "example": "512Mi"
                      },
                      "options": {
                        "type": "object",
                        "properties": {
                          "devMode": {
                            "type": "boolean",
                            "description": "runs algorithm with mounted sources to allow rapid development cycles"
                          },
                          "pending": {
                            "type": "boolean",
                            "description": "pending algorithm",
                            "default": false
                          },
                          "opengl": {
                            "type": "boolean",
                            "description": "should algorithm support XGL context creation (mount X socket)"
                          }
                        },
                        "default": {}
                      },
                      "version": {
                        "type": "string",
                        "description": "Hkube's auto increment semantic versioning",
                        "readOnly": true
                      },
                      "mounts": {
                        "type": "array",
                        "nullable": true,
                        "description": "a list of volumes to mount into the algorithm",
                        "items": {
                          "type": "object",
                          "properties": {
                            "pvcName": {
                              "type": "string",
                              "format": "algorithm-mount-pvc",
                              "minLength": 1,
                              "description": "name of an existing kubernetes pvc (persistent volume claim)"
                            },
                            "path": {
                              "type": "string",
                              "format": "path",
                              "minLength": 1,
                              "description": "the mount path in the algorithm container"
                            },
                            "volumeType": {
                              "type": "string",
                              "description": "Special volume types such as emptyDir",
                              "enum": [
                                "emptyDir",
                                "configMap"
                              ]
                            }
                          },
                          "required": [
                            "pvcName",
                            "path"
                          ]
                        },
                        "uniqueItems": true,
                        "example": []
                      },
                      "gitRepository": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "a url for the git repository",
                            "format": "url"
                          },
                          "commit": {
                            "type": "object",
                            "description": "commit details",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "commit id"
                              },
                              "timestamp": {
                                "type": "string",
                                "description": "commit time"
                              },
                              "message": {
                                "type": "string",
                                "description": "commit message"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "branchName": {
                            "type": "string",
                            "default": "master",
                            "description": "the branch name you wish to create a build from"
                          },
                          "tag": {
                            "type": "string",
                            "description": "a specific tag which will trigger the build"
                          },
                          "token": {
                            "type": "string",
                            "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                          },
                          "gitKind": {
                            "type": "string",
                            "enum": [
                              "github",
                              "gitlab"
                            ],
                            "default": "github"
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      "entryPoint": {
                        "type": "string",
                        "nullable": true
                      },
                      "dependencyInstallCmd": {
                        "type": "string",
                        "nullable": true,
                        "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                      },
                      "baseImage": {
                        "type": "string",
                        "nullable": true,
                        "description": "Custom docker image to be used as base to the newly built algorithm image"
                      },
                      "minHotWorkers": {
                        "type": "integer",
                        "description": "how many live algorithm instances will always run",
                        "minimum": 0,
                        "default": 0
                      },
                      "maxWorkers": {
                        "type": "integer",
                        "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                        "minimum": 0,
                        "nullable": true
                      },
                      "quotaGuarantee": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                        "minimum": 0
                      },
                      "algorithmEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for algorithm"
                      },
                      "workerEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for worker"
                      },
                      "nodeSelector": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value labels for nodes constraint",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "labels": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for users"
                      },
                      "annotations": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                      },
                      "streamKind": {
                        "enum": [
                          "stateless",
                          "stateful"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "description": "type of algorithm code resource",
                        "enum": [
                          "Git",
                          "Code",
                          "Image"
                        ],
                        "default": "Image"
                      },
                      "downloadFileExt": {
                        "type": "string",
                        "nullable": true,
                        "description": "the extension name that will be attached to a file when downloading algorithm result"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "StoreAlgorithms"
        ],
        "summary": "Insert algorithm",
        "description": "Insert new algorithm to store if not exists",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific algorithm",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "algorithm-name"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "batch",
                      "stream"
                    ]
                  },
                  "env": {
                    "type": "string",
                    "enum": [
                      "nodejs",
                      "python",
                      "java"
                    ]
                  },
                  "algorithmImage": {
                    "type": "string",
                    "description": "image name as in the docker registry",
                    "format": "algorithm-image"
                  },
                  "cpu": {
                    "type": "number",
                    "default": 0.1,
                    "minimum": 0,
                    "description": "algorithm cpu"
                  },
                  "gpu": {
                    "type": "number",
                    "minimum": 0,
                    "description": "algorithm gpu"
                  },
                  "mem": {
                    "type": "string",
                    "description": "algorithm memory",
                    "format": "algorithm-memory",
                    "default": "256Mi",
                    "example": "512Mi"
                  },
                  "reservedMemory": {
                    "type": "string",
                    "nullable": true,
                    "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                    "format": "memory",
                    "example": "512Mi"
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "devMode": {
                        "type": "boolean",
                        "description": "runs algorithm with mounted sources to allow rapid development cycles"
                      },
                      "pending": {
                        "type": "boolean",
                        "description": "pending algorithm",
                        "default": false
                      },
                      "opengl": {
                        "type": "boolean",
                        "description": "should algorithm support XGL context creation (mount X socket)"
                      }
                    },
                    "default": {}
                  },
                  "version": {
                    "type": "string",
                    "description": "Hkube's auto increment semantic versioning",
                    "readOnly": true
                  },
                  "mounts": {
                    "type": "array",
                    "nullable": true,
                    "description": "a list of volumes to mount into the algorithm",
                    "items": {
                      "type": "object",
                      "properties": {
                        "pvcName": {
                          "type": "string",
                          "format": "algorithm-mount-pvc",
                          "minLength": 1,
                          "description": "name of an existing kubernetes pvc (persistent volume claim)"
                        },
                        "path": {
                          "type": "string",
                          "format": "path",
                          "minLength": 1,
                          "description": "the mount path in the algorithm container"
                        },
                        "volumeType": {
                          "type": "string",
                          "description": "Special volume types such as emptyDir",
                          "enum": [
                            "emptyDir",
                            "configMap"
                          ]
                        }
                      },
                      "required": [
                        "pvcName",
                        "path"
                      ]
                    },
                    "uniqueItems": true,
                    "example": []
                  },
                  "gitRepository": {
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "a url for the git repository",
                        "format": "url"
                      },
                      "commit": {
                        "type": "object",
                        "description": "commit details",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "commit id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "commit time"
                          },
                          "message": {
                            "type": "string",
                            "description": "commit message"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "branchName": {
                        "type": "string",
                        "default": "master",
                        "description": "the branch name you wish to create a build from"
                      },
                      "tag": {
                        "type": "string",
                        "description": "a specific tag which will trigger the build"
                      },
                      "token": {
                        "type": "string",
                        "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                      },
                      "gitKind": {
                        "type": "string",
                        "enum": [
                          "github",
                          "gitlab"
                        ],
                        "default": "github"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "entryPoint": {
                    "type": "string",
                    "nullable": true
                  },
                  "dependencyInstallCmd": {
                    "type": "string",
                    "nullable": true,
                    "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                  },
                  "baseImage": {
                    "type": "string",
                    "nullable": true,
                    "description": "Custom docker image to be used as base to the newly built algorithm image"
                  },
                  "minHotWorkers": {
                    "type": "integer",
                    "description": "how many live algorithm instances will always run",
                    "minimum": 0,
                    "default": 0
                  },
                  "maxWorkers": {
                    "type": "integer",
                    "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                    "minimum": 0,
                    "nullable": true
                  },
                  "quotaGuarantee": {
                    "type": "integer",
                    "nullable": true,
                    "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                    "minimum": 0
                  },
                  "algorithmEnv": {
                    "type": "object",
                    "nullable": true,
                    "description": "key value environment variables for algorithm"
                  },
                  "workerEnv": {
                    "type": "object",
                    "nullable": true,
                    "description": "key value environment variables for worker"
                  },
                  "nodeSelector": {
                    "type": "object",
                    "nullable": true,
                    "description": "key value labels for nodes constraint",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "labels": {
                    "type": "object",
                    "nullable": true,
                    "description": "attach key value metadata to algorithm pod, usually for users"
                  },
                  "annotations": {
                    "type": "object",
                    "nullable": true,
                    "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                  },
                  "streamKind": {
                    "enum": [
                      "stateless",
                      "stateful"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "description": "type of algorithm code resource",
                    "enum": [
                      "Git",
                      "Code",
                      "Image"
                    ],
                    "default": "Image"
                  },
                  "downloadFileExt": {
                    "type": "string",
                    "nullable": true,
                    "description": "the extension name that will be attached to a file when downloading algorithm result"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "algorithm descriptor to be added to the store",
          "required": true
        },
        "responses": {
          "201": {
            "description": "algorithm created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "pipeline conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "StoreAlgorithms"
        ],
        "summary": "Update algorithm",
        "description": "Update existing algorithm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific algorithm",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "algorithm-name"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "batch",
                      "stream"
                    ]
                  },
                  "env": {
                    "type": "string",
                    "enum": [
                      "nodejs",
                      "python",
                      "java"
                    ]
                  },
                  "algorithmImage": {
                    "type": "string",
                    "description": "image name as in the docker registry",
                    "format": "algorithm-image"
                  },
                  "cpu": {
                    "type": "number",
                    "default": 0.1,
                    "minimum": 0,
                    "description": "algorithm cpu"
                  },
                  "gpu": {
                    "type": "number",
                    "minimum": 0,
                    "description": "algorithm gpu"
                  },
                  "mem": {
                    "type": "string",
                    "description": "algorithm memory",
                    "format": "algorithm-memory",
                    "default": "256Mi",
                    "example": "512Mi"
                  },
                  "reservedMemory": {
                    "type": "string",
                    "nullable": true,
                    "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                    "format": "memory",
                    "example": "512Mi"
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "devMode": {
                        "type": "boolean",
                        "description": "runs algorithm with mounted sources to allow rapid development cycles"
                      },
                      "pending": {
                        "type": "boolean",
                        "description": "pending algorithm",
                        "default": false
                      },
                      "opengl": {
                        "type": "boolean",
                        "description": "should algorithm support XGL context creation (mount X socket)"
                      }
                    },
                    "default": {}
                  },
                  "version": {
                    "type": "string",
                    "description": "Hkube's auto increment semantic versioning",
                    "readOnly": true
                  },
                  "mounts": {
                    "type": "array",
                    "nullable": true,
                    "description": "a list of volumes to mount into the algorithm",
                    "items": {
                      "type": "object",
                      "properties": {
                        "pvcName": {
                          "type": "string",
                          "format": "algorithm-mount-pvc",
                          "minLength": 1,
                          "description": "name of an existing kubernetes pvc (persistent volume claim)"
                        },
                        "path": {
                          "type": "string",
                          "format": "path",
                          "minLength": 1,
                          "description": "the mount path in the algorithm container"
                        },
                        "volumeType": {
                          "type": "string",
                          "description": "Special volume types such as emptyDir",
                          "enum": [
                            "emptyDir",
                            "configMap"
                          ]
                        }
                      },
                      "required": [
                        "pvcName",
                        "path"
                      ]
                    },
                    "uniqueItems": true,
                    "example": []
                  },
                  "gitRepository": {
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "a url for the git repository",
                        "format": "url"
                      },
                      "commit": {
                        "type": "object",
                        "description": "commit details",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "commit id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "commit time"
                          },
                          "message": {
                            "type": "string",
                            "description": "commit message"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "branchName": {
                        "type": "string",
                        "default": "master",
                        "description": "the branch name you wish to create a build from"
                      },
                      "tag": {
                        "type": "string",
                        "description": "a specific tag which will trigger the build"
                      },
                      "token": {
                        "type": "string",
                        "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                      },
                      "gitKind": {
                        "type": "string",
                        "enum": [
                          "github",
                          "gitlab"
                        ],
                        "default": "github"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "entryPoint": {
                    "type": "string",
                    "nullable": true
                  },
                  "dependencyInstallCmd": {
                    "type": "string",
                    "nullable": true,
                    "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                  },
                  "baseImage": {
                    "type": "string",
                    "nullable": true,
                    "description": "Custom docker image to be used as base to the newly built algorithm image"
                  },
                  "minHotWorkers": {
                    "type": "integer",
                    "description": "how many live algorithm instances will always run",
                    "minimum": 0,
                    "default": 0
                  },
                  "maxWorkers": {
                    "type": "integer",
                    "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                    "minimum": 0,
                    "nullable": true
                  },
                  "quotaGuarantee": {
                    "type": "integer",
                    "nullable": true,
                    "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                    "minimum": 0
                  },
                  "algorithmEnv": {
                    "type": "object",
                    "nullable": true,
                    "description": "key value environment variables for algorithm"
                  },
                  "workerEnv": {
                    "type": "object",
                    "nullable": true,
                    "description": "key value environment variables for worker"
                  },
                  "nodeSelector": {
                    "type": "object",
                    "nullable": true,
                    "description": "key value labels for nodes constraint",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "labels": {
                    "type": "object",
                    "nullable": true,
                    "description": "attach key value metadata to algorithm pod, usually for users"
                  },
                  "annotations": {
                    "type": "object",
                    "nullable": true,
                    "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                  },
                  "streamKind": {
                    "enum": [
                      "stateless",
                      "stateful"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "description": "type of algorithm code resource",
                    "enum": [
                      "Git",
                      "Code",
                      "Image"
                    ],
                    "default": "Image"
                  },
                  "downloadFileExt": {
                    "type": "string",
                    "nullable": true,
                    "description": "the extension name that will be attached to a file when downloading algorithm result"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "algorithm descriptor to be added to the store",
          "required": true
        },
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/store/algorithms/apply": {
      "post": {
        "tags": [
          "StoreAlgorithms"
        ],
        "summary": "Apply algorithm",
        "description": "create or update algorithm, build id will be returned if build was triggered",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique identifier representing a specific algorithm",
                        "minLength": 1,
                        "maxLength": 32,
                        "format": "algorithm-name"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "batch",
                          "stream"
                        ]
                      },
                      "env": {
                        "type": "string",
                        "enum": [
                          "nodejs",
                          "python",
                          "java"
                        ]
                      },
                      "algorithmImage": {
                        "type": "string",
                        "description": "image name as in the docker registry",
                        "format": "algorithm-image"
                      },
                      "cpu": {
                        "type": "number",
                        "default": 0.1,
                        "minimum": 0,
                        "description": "algorithm cpu"
                      },
                      "gpu": {
                        "type": "number",
                        "minimum": 0,
                        "description": "algorithm gpu"
                      },
                      "mem": {
                        "type": "string",
                        "description": "algorithm memory",
                        "format": "algorithm-memory",
                        "default": "256Mi",
                        "example": "512Mi"
                      },
                      "reservedMemory": {
                        "type": "string",
                        "nullable": true,
                        "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                        "format": "memory",
                        "example": "512Mi"
                      },
                      "options": {
                        "type": "object",
                        "properties": {
                          "devMode": {
                            "type": "boolean",
                            "description": "runs algorithm with mounted sources to allow rapid development cycles"
                          },
                          "pending": {
                            "type": "boolean",
                            "description": "pending algorithm",
                            "default": false
                          },
                          "opengl": {
                            "type": "boolean",
                            "description": "should algorithm support XGL context creation (mount X socket)"
                          }
                        },
                        "default": {}
                      },
                      "version": {
                        "type": "string",
                        "description": "Hkube's auto increment semantic versioning",
                        "readOnly": true
                      },
                      "mounts": {
                        "type": "array",
                        "nullable": true,
                        "description": "a list of volumes to mount into the algorithm",
                        "items": {
                          "type": "object",
                          "properties": {
                            "pvcName": {
                              "type": "string",
                              "format": "algorithm-mount-pvc",
                              "minLength": 1,
                              "description": "name of an existing kubernetes pvc (persistent volume claim)"
                            },
                            "path": {
                              "type": "string",
                              "format": "path",
                              "minLength": 1,
                              "description": "the mount path in the algorithm container"
                            },
                            "volumeType": {
                              "type": "string",
                              "description": "Special volume types such as emptyDir",
                              "enum": [
                                "emptyDir",
                                "configMap"
                              ]
                            }
                          },
                          "required": [
                            "pvcName",
                            "path"
                          ]
                        },
                        "uniqueItems": true,
                        "example": []
                      },
                      "gitRepository": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "a url for the git repository",
                            "format": "url"
                          },
                          "commit": {
                            "type": "object",
                            "description": "commit details",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "commit id"
                              },
                              "timestamp": {
                                "type": "string",
                                "description": "commit time"
                              },
                              "message": {
                                "type": "string",
                                "description": "commit message"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "branchName": {
                            "type": "string",
                            "default": "master",
                            "description": "the branch name you wish to create a build from"
                          },
                          "tag": {
                            "type": "string",
                            "description": "a specific tag which will trigger the build"
                          },
                          "token": {
                            "type": "string",
                            "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                          },
                          "gitKind": {
                            "type": "string",
                            "enum": [
                              "github",
                              "gitlab"
                            ],
                            "default": "github"
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      "entryPoint": {
                        "type": "string",
                        "nullable": true
                      },
                      "dependencyInstallCmd": {
                        "type": "string",
                        "nullable": true,
                        "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                      },
                      "baseImage": {
                        "type": "string",
                        "nullable": true,
                        "description": "Custom docker image to be used as base to the newly built algorithm image"
                      },
                      "minHotWorkers": {
                        "type": "integer",
                        "description": "how many live algorithm instances will always run",
                        "minimum": 0,
                        "default": 0
                      },
                      "maxWorkers": {
                        "type": "integer",
                        "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                        "minimum": 0,
                        "nullable": true
                      },
                      "quotaGuarantee": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                        "minimum": 0
                      },
                      "algorithmEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for algorithm"
                      },
                      "workerEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for worker"
                      },
                      "nodeSelector": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value labels for nodes constraint",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "labels": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for users"
                      },
                      "annotations": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                      },
                      "streamKind": {
                        "enum": [
                          "stateless",
                          "stateful"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "description": "type of algorithm code resource",
                        "enum": [
                          "Git",
                          "Code",
                          "Image"
                        ],
                        "default": "Image"
                      },
                      "downloadFileExt": {
                        "type": "string",
                        "nullable": true,
                        "description": "the extension name that will be attached to a file when downloading algorithm result"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "forceUpdate": {
                        "type": "boolean",
                        "description": "should set the newly created version as current",
                        "default": false
                      },
                      "forceBuild": {
                        "type": "boolean",
                        "description": "should force new build",
                        "default": false
                      }
                    }
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "the algorithm source code (file types: zip, tar.gz)"
                  }
                }
              }
            }
          },
          "description": "algorithm descriptor to be added to the store",
          "required": true
        },
        "responses": {
          "200": {
            "description": "algorithm applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "buildId": {
                      "type": "string",
                      "description": "Pipeline name"
                    },
                    "algorithm": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific algorithm",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "algorithm-name"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "batch",
                            "stream"
                          ]
                        },
                        "env": {
                          "type": "string",
                          "enum": [
                            "nodejs",
                            "python",
                            "java"
                          ]
                        },
                        "algorithmImage": {
                          "type": "string",
                          "description": "image name as in the docker registry",
                          "format": "algorithm-image"
                        },
                        "cpu": {
                          "type": "number",
                          "default": 0.1,
                          "minimum": 0,
                          "description": "algorithm cpu"
                        },
                        "gpu": {
                          "type": "number",
                          "minimum": 0,
                          "description": "algorithm gpu"
                        },
                        "mem": {
                          "type": "string",
                          "description": "algorithm memory",
                          "format": "algorithm-memory",
                          "default": "256Mi",
                          "example": "512Mi"
                        },
                        "reservedMemory": {
                          "type": "string",
                          "nullable": true,
                          "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                          "format": "memory",
                          "example": "512Mi"
                        },
                        "options": {
                          "type": "object",
                          "properties": {
                            "devMode": {
                              "type": "boolean",
                              "description": "runs algorithm with mounted sources to allow rapid development cycles"
                            },
                            "pending": {
                              "type": "boolean",
                              "description": "pending algorithm",
                              "default": false
                            },
                            "opengl": {
                              "type": "boolean",
                              "description": "should algorithm support XGL context creation (mount X socket)"
                            }
                          },
                          "default": {}
                        },
                        "version": {
                          "type": "string",
                          "description": "Hkube's auto increment semantic versioning",
                          "readOnly": true
                        },
                        "mounts": {
                          "type": "array",
                          "nullable": true,
                          "description": "a list of volumes to mount into the algorithm",
                          "items": {
                            "type": "object",
                            "properties": {
                              "pvcName": {
                                "type": "string",
                                "format": "algorithm-mount-pvc",
                                "minLength": 1,
                                "description": "name of an existing kubernetes pvc (persistent volume claim)"
                              },
                              "path": {
                                "type": "string",
                                "format": "path",
                                "minLength": 1,
                                "description": "the mount path in the algorithm container"
                              },
                              "volumeType": {
                                "type": "string",
                                "description": "Special volume types such as emptyDir",
                                "enum": [
                                  "emptyDir",
                                  "configMap"
                                ]
                              }
                            },
                            "required": [
                              "pvcName",
                              "path"
                            ]
                          },
                          "uniqueItems": true,
                          "example": []
                        },
                        "gitRepository": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "a url for the git repository",
                              "format": "url"
                            },
                            "commit": {
                              "type": "object",
                              "description": "commit details",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "commit id"
                                },
                                "timestamp": {
                                  "type": "string",
                                  "description": "commit time"
                                },
                                "message": {
                                  "type": "string",
                                  "description": "commit message"
                                }
                              },
                              "required": [
                                "id"
                              ]
                            },
                            "branchName": {
                              "type": "string",
                              "default": "master",
                              "description": "the branch name you wish to create a build from"
                            },
                            "tag": {
                              "type": "string",
                              "description": "a specific tag which will trigger the build"
                            },
                            "token": {
                              "type": "string",
                              "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                            },
                            "gitKind": {
                              "type": "string",
                              "enum": [
                                "github",
                                "gitlab"
                              ],
                              "default": "github"
                            }
                          },
                          "required": [
                            "url"
                          ]
                        },
                        "entryPoint": {
                          "type": "string",
                          "nullable": true
                        },
                        "dependencyInstallCmd": {
                          "type": "string",
                          "nullable": true,
                          "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                        },
                        "baseImage": {
                          "type": "string",
                          "nullable": true,
                          "description": "Custom docker image to be used as base to the newly built algorithm image"
                        },
                        "minHotWorkers": {
                          "type": "integer",
                          "description": "how many live algorithm instances will always run",
                          "minimum": 0,
                          "default": 0
                        },
                        "maxWorkers": {
                          "type": "integer",
                          "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                          "minimum": 0,
                          "nullable": true
                        },
                        "quotaGuarantee": {
                          "type": "integer",
                          "nullable": true,
                          "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                          "minimum": 0
                        },
                        "algorithmEnv": {
                          "type": "object",
                          "nullable": true,
                          "description": "key value environment variables for algorithm"
                        },
                        "workerEnv": {
                          "type": "object",
                          "nullable": true,
                          "description": "key value environment variables for worker"
                        },
                        "nodeSelector": {
                          "type": "object",
                          "nullable": true,
                          "description": "key value labels for nodes constraint",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "labels": {
                          "type": "object",
                          "nullable": true,
                          "description": "attach key value metadata to algorithm pod, usually for users"
                        },
                        "annotations": {
                          "type": "object",
                          "nullable": true,
                          "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                        },
                        "streamKind": {
                          "enum": [
                            "stateless",
                            "stateful"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "description": "type of algorithm code resource",
                          "enum": [
                            "Git",
                            "Code",
                            "Image"
                          ],
                          "default": "Image"
                        },
                        "downloadFileExt": {
                          "type": "string",
                          "nullable": true,
                          "description": "the extension name that will be attached to a file when downloading algorithm result"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/store/pipelines/{name}": {
      "get": {
        "tags": [
          "StorePipelines"
        ],
        "summary": "Get pipeline",
        "description": "Get specific pipeline from store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "pipeline name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "kind": {
                      "type": "string",
                      "default": "batch",
                      "example": "batch",
                      "enum": [
                        "batch",
                        "stream"
                      ]
                    },
                    "experimentName": {
                      "type": "string",
                      "description": "experiment name",
                      "default": "main",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "experiment-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "pipeline description"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Array of nodes",
                      "items": {
                        "type": "object",
                        "properties": {
                          "nodeName": {
                            "type": "string",
                            "description": "Unique node identifier",
                            "minLength": 1
                          },
                          "algorithmName": {
                            "type": "string",
                            "description": "Unique identifier representing a specific algorithm",
                            "minLength": 1,
                            "maxLength": 32,
                            "format": "algorithm-name"
                          },
                          "input": {
                            "type": "array",
                            "description": "The input for the algorithm",
                            "items": {},
                            "default": []
                          },
                          "ttl": {
                            "type": "integer",
                            "description": "Algorithm execution time to live in seconds. 0 to disable",
                            "minimum": 0,
                            "example": 0
                          },
                          "includeInResult": {
                            "type": "boolean"
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "tensorboard": {
                                "type": "boolean",
                                "description": "Should tensorboard metrics be collected."
                              }
                            }
                          },
                          "retry": {
                            "type": "object",
                            "properties": {
                              "policy": {
                                "type": "string",
                                "default": "OnCrash",
                                "enum": [
                                  "Never",
                                  "Always",
                                  "OnError",
                                  "OnCrash"
                                ]
                              },
                              "limit": {
                                "type": "integer",
                                "minimum": 1,
                                "default": 3,
                                "example": 1
                              }
                            }
                          },
                          "batchOperation": {
                            "type": "string",
                            "enum": [
                              "indexed",
                              "cartesian"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "default": "algorithm",
                            "enum": [
                              "algorithm",
                              "pipeline",
                              "debug",
                              "dataSource",
                              "gateway",
                              "output",
                              "hyperparamsTuner"
                            ]
                          },
                          "spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Unique identifier representing a specific pipeline",
                                    "minLength": 1,
                                    "format": "pipeline-name"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "snapshot": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "name",
                                  "snapshot"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "describe the output"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for output",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "nodeName"
                        ]
                      }
                    },
                    "flowInput": {
                      "type": "object",
                      "nullable": true,
                      "description": "input object"
                    },
                    "webhooks": {
                      "type": "object",
                      "properties": {
                        "progress": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon progress",
                          "example": "http://my-url-to-progress"
                        },
                        "result": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon result",
                          "example": "http://my-url-to-result"
                        }
                      },
                      "additionalProperties": false
                    },
                    "options": {
                      "default": {},
                      "type": "object",
                      "properties": {
                        "ttl": {
                          "type": "integer",
                          "description": "pipeline time to live in seconds",
                          "minimum": 1,
                          "default": 3600,
                          "example": 3600
                        },
                        "batchTolerance": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 100,
                          "default": 80,
                          "example": 80
                        },
                        "concurrentPipelines": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 10000,
                              "example": 1
                            },
                            "rejectOnFailure": {
                              "type": "boolean",
                              "default": true
                            }
                          },
                          "additionalProperties": false
                        },
                        "progressVerbosityLevel": {
                          "type": "string",
                          "default": "info",
                          "example": "info",
                          "enum": [
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error",
                            "critical"
                          ]
                        },
                        "debugOverride": {
                          "type": "array",
                          "description": "A list of algorithms to debug in this execution",
                          "items": {
                            "type": "string"
                          },
                          "uniqueItems": true
                        }
                      },
                      "description": "optional properties"
                    },
                    "priority": {
                      "default": 3,
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 5,
                      "example": 3
                    },
                    "triggers": {
                      "type": "object",
                      "properties": {
                        "pipelines": {
                          "type": "array",
                          "description": "pipelines to activate upon result",
                          "items": {
                            "type": "string",
                            "minLength": 1
                          },
                          "uniqueItems": true
                        },
                        "cron": {
                          "type": "object",
                          "properties": {
                            "pattern": {
                              "type": "string",
                              "description": "cron job",
                              "minLength": 1,
                              "format": "cron"
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "enable or disable cron job",
                              "default": false
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "Array of tags",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "rootJobId": {
                      "type": "string",
                      "description": "the root job id of the current tree"
                    },
                    "streaming": {
                      "type": "object",
                      "description": "streaming options",
                      "properties": {
                        "defaultFlow": {
                          "type": "string",
                          "description": "the name of the default stream flow"
                        },
                        "flows": {
                          "type": "object",
                          "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                          "example": {
                            "main": "A >> B&C | B >> D | C >> E",
                            "second": "A >> B >> C"
                          }
                        }
                      }
                    },
                    "edges": {
                      "type": "array",
                      "description": "edges define relation between nodes",
                      "items": {},
                      "example": [
                        {
                          "source": "A",
                          "target": "B"
                        }
                      ]
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StorePipelines"
        ],
        "summary": "Delete pipeline",
        "description": "Delete existing pipeline from store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "pipeline name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/store/pipelines": {
      "get": {
        "tags": [
          "StorePipelines"
        ],
        "summary": "Get all pipelines",
        "description": "Get all pipelines from store",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique identifier representing a specific pipeline",
                        "minLength": 1,
                        "format": "pipeline-name"
                      },
                      "kind": {
                        "type": "string",
                        "default": "batch",
                        "example": "batch",
                        "enum": [
                          "batch",
                          "stream"
                        ]
                      },
                      "experimentName": {
                        "type": "string",
                        "description": "experiment name",
                        "default": "main",
                        "minLength": 1,
                        "maxLength": 32,
                        "format": "experiment-name"
                      },
                      "description": {
                        "type": "string",
                        "description": "pipeline description"
                      },
                      "nodes": {
                        "type": "array",
                        "description": "Array of nodes",
                        "items": {
                          "type": "object",
                          "properties": {
                            "nodeName": {
                              "type": "string",
                              "description": "Unique node identifier",
                              "minLength": 1
                            },
                            "algorithmName": {
                              "type": "string",
                              "description": "Unique identifier representing a specific algorithm",
                              "minLength": 1,
                              "maxLength": 32,
                              "format": "algorithm-name"
                            },
                            "input": {
                              "type": "array",
                              "description": "The input for the algorithm",
                              "items": {},
                              "default": []
                            },
                            "ttl": {
                              "type": "integer",
                              "description": "Algorithm execution time to live in seconds. 0 to disable",
                              "minimum": 0,
                              "example": 0
                            },
                            "includeInResult": {
                              "type": "boolean"
                            },
                            "metrics": {
                              "type": "object",
                              "properties": {
                                "tensorboard": {
                                  "type": "boolean",
                                  "description": "Should tensorboard metrics be collected."
                                }
                              }
                            },
                            "retry": {
                              "type": "object",
                              "properties": {
                                "policy": {
                                  "type": "string",
                                  "default": "OnCrash",
                                  "enum": [
                                    "Never",
                                    "Always",
                                    "OnError",
                                    "OnCrash"
                                  ]
                                },
                                "limit": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "default": 3,
                                  "example": 1
                                }
                              }
                            },
                            "batchOperation": {
                              "type": "string",
                              "enum": [
                                "indexed",
                                "cartesian"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "default": "algorithm",
                              "enum": [
                                "algorithm",
                                "pipeline",
                                "debug",
                                "dataSource",
                                "gateway",
                                "output",
                                "hyperparamsTuner"
                              ]
                            },
                            "spec": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Unique identifier representing a specific pipeline",
                                      "minLength": 1,
                                      "format": "pipeline-name"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "gateway name",
                                      "minLength": 1,
                                      "maxLength": 32,
                                      "format": "gateway-name"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "describe the gateway"
                                    },
                                    "mem": {
                                      "type": "string",
                                      "description": "Memory allocated for streaming gateway",
                                      "format": "algorithm-memory",
                                      "default": "512Mi"
                                    },
                                    "cpu": {
                                      "type": "number",
                                      "description": "Cpu allocated for streaming gateway",
                                      "default": 0.5
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "snapshot": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "snapshot"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "description": {
                                      "type": "string",
                                      "description": "describe the output"
                                    },
                                    "mem": {
                                      "type": "string",
                                      "description": "Memory allocated for output",
                                      "format": "algorithm-memory",
                                      "default": "512Mi"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "gateway name",
                                      "minLength": 1,
                                      "maxLength": 32,
                                      "format": "gateway-name"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "describe the gateway"
                                    },
                                    "mem": {
                                      "type": "string",
                                      "description": "Memory allocated for streaming gateway",
                                      "format": "algorithm-memory",
                                      "default": "512Mi"
                                    },
                                    "cpu": {
                                      "type": "number",
                                      "description": "Cpu allocated for streaming gateway",
                                      "default": 0.5
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "required": [
                            "nodeName"
                          ]
                        }
                      },
                      "flowInput": {
                        "type": "object",
                        "nullable": true,
                        "description": "input object"
                      },
                      "webhooks": {
                        "type": "object",
                        "properties": {
                          "progress": {
                            "type": "string",
                            "format": "url",
                            "minLength": 1,
                            "description": "url to activate upon progress",
                            "example": "http://my-url-to-progress"
                          },
                          "result": {
                            "type": "string",
                            "format": "url",
                            "minLength": 1,
                            "description": "url to activate upon result",
                            "example": "http://my-url-to-result"
                          }
                        },
                        "additionalProperties": false
                      },
                      "options": {
                        "default": {},
                        "type": "object",
                        "properties": {
                          "ttl": {
                            "type": "integer",
                            "description": "pipeline time to live in seconds",
                            "minimum": 1,
                            "default": 3600,
                            "example": 3600
                          },
                          "batchTolerance": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "default": 80,
                            "example": 80
                          },
                          "concurrentPipelines": {
                            "type": "object",
                            "properties": {
                              "amount": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 10000,
                                "example": 1
                              },
                              "rejectOnFailure": {
                                "type": "boolean",
                                "default": true
                              }
                            },
                            "additionalProperties": false
                          },
                          "progressVerbosityLevel": {
                            "type": "string",
                            "default": "info",
                            "example": "info",
                            "enum": [
                              "trace",
                              "debug",
                              "info",
                              "warn",
                              "error",
                              "critical"
                            ]
                          },
                          "debugOverride": {
                            "type": "array",
                            "description": "A list of algorithms to debug in this execution",
                            "items": {
                              "type": "string"
                            },
                            "uniqueItems": true
                          }
                        },
                        "description": "optional properties"
                      },
                      "priority": {
                        "default": 3,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 5,
                        "example": 3
                      },
                      "triggers": {
                        "type": "object",
                        "properties": {
                          "pipelines": {
                            "type": "array",
                            "description": "pipelines to activate upon result",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            },
                            "uniqueItems": true
                          },
                          "cron": {
                            "type": "object",
                            "properties": {
                              "pattern": {
                                "type": "string",
                                "description": "cron job",
                                "minLength": 1,
                                "format": "cron"
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "enable or disable cron job",
                                "default": false
                              }
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "tags": {
                        "type": "array",
                        "description": "Array of tags",
                        "items": {
                          "type": "string",
                          "description": "Unique identifier representing a specific tag",
                          "minLength": 1,
                          "maxLength": 32
                        }
                      },
                      "rootJobId": {
                        "type": "string",
                        "description": "the root job id of the current tree"
                      },
                      "streaming": {
                        "type": "object",
                        "description": "streaming options",
                        "properties": {
                          "defaultFlow": {
                            "type": "string",
                            "description": "the name of the default stream flow"
                          },
                          "flows": {
                            "type": "object",
                            "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                            "example": {
                              "main": "A >> B&C | B >> D | C >> E",
                              "second": "A >> B >> C"
                            }
                          }
                        }
                      },
                      "edges": {
                        "type": "array",
                        "description": "edges define relation between nodes",
                        "items": {},
                        "example": [
                          {
                            "source": "A",
                            "target": "B"
                          }
                        ]
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "StorePipelines"
        ],
        "summary": "Insert pipeline",
        "description": "Insert new pipeline to store if not exist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  },
                  "kind": {
                    "type": "string",
                    "default": "batch",
                    "example": "batch",
                    "enum": [
                      "batch",
                      "stream"
                    ]
                  },
                  "experimentName": {
                    "type": "string",
                    "description": "experiment name",
                    "default": "main",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "experiment-name"
                  },
                  "description": {
                    "type": "string",
                    "description": "pipeline description"
                  },
                  "nodes": {
                    "type": "array",
                    "description": "Array of nodes",
                    "items": {
                      "type": "object",
                      "properties": {
                        "nodeName": {
                          "type": "string",
                          "description": "Unique node identifier",
                          "minLength": 1
                        },
                        "algorithmName": {
                          "type": "string",
                          "description": "Unique identifier representing a specific algorithm",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "algorithm-name"
                        },
                        "input": {
                          "type": "array",
                          "description": "The input for the algorithm",
                          "items": {},
                          "default": []
                        },
                        "ttl": {
                          "type": "integer",
                          "description": "Algorithm execution time to live in seconds. 0 to disable",
                          "minimum": 0,
                          "example": 0
                        },
                        "includeInResult": {
                          "type": "boolean"
                        },
                        "metrics": {
                          "type": "object",
                          "properties": {
                            "tensorboard": {
                              "type": "boolean",
                              "description": "Should tensorboard metrics be collected."
                            }
                          }
                        },
                        "retry": {
                          "type": "object",
                          "properties": {
                            "policy": {
                              "type": "string",
                              "default": "OnCrash",
                              "enum": [
                                "Never",
                                "Always",
                                "OnError",
                                "OnCrash"
                              ]
                            },
                            "limit": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 3,
                              "example": 1
                            }
                          }
                        },
                        "batchOperation": {
                          "type": "string",
                          "enum": [
                            "indexed",
                            "cartesian"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "default": "algorithm",
                          "enum": [
                            "algorithm",
                            "pipeline",
                            "debug",
                            "dataSource",
                            "gateway",
                            "output",
                            "hyperparamsTuner"
                          ]
                        },
                        "spec": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Unique identifier representing a specific pipeline",
                                  "minLength": 1,
                                  "format": "pipeline-name"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "snapshot": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "snapshot"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "describe the output"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for output",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "nodeName"
                      ]
                    }
                  },
                  "flowInput": {
                    "type": "object",
                    "nullable": true,
                    "description": "input object"
                  },
                  "webhooks": {
                    "type": "object",
                    "properties": {
                      "progress": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon progress",
                        "example": "http://my-url-to-progress"
                      },
                      "result": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon result",
                        "example": "http://my-url-to-result"
                      }
                    },
                    "additionalProperties": false
                  },
                  "options": {
                    "default": {},
                    "type": "object",
                    "properties": {
                      "ttl": {
                        "type": "integer",
                        "description": "pipeline time to live in seconds",
                        "minimum": 1,
                        "default": 3600,
                        "example": 3600
                      },
                      "batchTolerance": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "default": 80,
                        "example": 80
                      },
                      "concurrentPipelines": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10000,
                            "example": 1
                          },
                          "rejectOnFailure": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "additionalProperties": false
                      },
                      "progressVerbosityLevel": {
                        "type": "string",
                        "default": "info",
                        "example": "info",
                        "enum": [
                          "trace",
                          "debug",
                          "info",
                          "warn",
                          "error",
                          "critical"
                        ]
                      },
                      "debugOverride": {
                        "type": "array",
                        "description": "A list of algorithms to debug in this execution",
                        "items": {
                          "type": "string"
                        },
                        "uniqueItems": true
                      }
                    },
                    "description": "optional properties"
                  },
                  "priority": {
                    "default": 3,
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 3
                  },
                  "triggers": {
                    "type": "object",
                    "properties": {
                      "pipelines": {
                        "type": "array",
                        "description": "pipelines to activate upon result",
                        "items": {
                          "type": "string",
                          "minLength": 1
                        },
                        "uniqueItems": true
                      },
                      "cron": {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "string",
                            "description": "cron job",
                            "minLength": 1,
                            "format": "cron"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "enable or disable cron job",
                            "default": false
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "Array of tags",
                    "items": {
                      "type": "string",
                      "description": "Unique identifier representing a specific tag",
                      "minLength": 1,
                      "maxLength": 32
                    }
                  },
                  "rootJobId": {
                    "type": "string",
                    "description": "the root job id of the current tree"
                  },
                  "streaming": {
                    "type": "object",
                    "description": "streaming options",
                    "properties": {
                      "defaultFlow": {
                        "type": "string",
                        "description": "the name of the default stream flow"
                      },
                      "flows": {
                        "type": "object",
                        "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                        "example": {
                          "main": "A >> B&C | B >> D | C >> E",
                          "second": "A >> B >> C"
                        }
                      }
                    }
                  },
                  "edges": {
                    "type": "array",
                    "description": "edges define relation between nodes",
                    "items": {},
                    "example": [
                      {
                        "source": "A",
                        "target": "B"
                      }
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "an object representing all information needed for pipeline execution",
          "required": true
        },
        "responses": {
          "201": {
            "description": "pipeline created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "kind": {
                      "type": "string",
                      "default": "batch",
                      "example": "batch",
                      "enum": [
                        "batch",
                        "stream"
                      ]
                    },
                    "experimentName": {
                      "type": "string",
                      "description": "experiment name",
                      "default": "main",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "experiment-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "pipeline description"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Array of nodes",
                      "items": {
                        "type": "object",
                        "properties": {
                          "nodeName": {
                            "type": "string",
                            "description": "Unique node identifier",
                            "minLength": 1
                          },
                          "algorithmName": {
                            "type": "string",
                            "description": "Unique identifier representing a specific algorithm",
                            "minLength": 1,
                            "maxLength": 32,
                            "format": "algorithm-name"
                          },
                          "input": {
                            "type": "array",
                            "description": "The input for the algorithm",
                            "items": {},
                            "default": []
                          },
                          "ttl": {
                            "type": "integer",
                            "description": "Algorithm execution time to live in seconds. 0 to disable",
                            "minimum": 0,
                            "example": 0
                          },
                          "includeInResult": {
                            "type": "boolean"
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "tensorboard": {
                                "type": "boolean",
                                "description": "Should tensorboard metrics be collected."
                              }
                            }
                          },
                          "retry": {
                            "type": "object",
                            "properties": {
                              "policy": {
                                "type": "string",
                                "default": "OnCrash",
                                "enum": [
                                  "Never",
                                  "Always",
                                  "OnError",
                                  "OnCrash"
                                ]
                              },
                              "limit": {
                                "type": "integer",
                                "minimum": 1,
                                "default": 3,
                                "example": 1
                              }
                            }
                          },
                          "batchOperation": {
                            "type": "string",
                            "enum": [
                              "indexed",
                              "cartesian"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "default": "algorithm",
                            "enum": [
                              "algorithm",
                              "pipeline",
                              "debug",
                              "dataSource",
                              "gateway",
                              "output",
                              "hyperparamsTuner"
                            ]
                          },
                          "spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Unique identifier representing a specific pipeline",
                                    "minLength": 1,
                                    "format": "pipeline-name"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "snapshot": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "name",
                                  "snapshot"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "describe the output"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for output",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "nodeName"
                        ]
                      }
                    },
                    "flowInput": {
                      "type": "object",
                      "nullable": true,
                      "description": "input object"
                    },
                    "webhooks": {
                      "type": "object",
                      "properties": {
                        "progress": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon progress",
                          "example": "http://my-url-to-progress"
                        },
                        "result": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon result",
                          "example": "http://my-url-to-result"
                        }
                      },
                      "additionalProperties": false
                    },
                    "options": {
                      "default": {},
                      "type": "object",
                      "properties": {
                        "ttl": {
                          "type": "integer",
                          "description": "pipeline time to live in seconds",
                          "minimum": 1,
                          "default": 3600,
                          "example": 3600
                        },
                        "batchTolerance": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 100,
                          "default": 80,
                          "example": 80
                        },
                        "concurrentPipelines": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 10000,
                              "example": 1
                            },
                            "rejectOnFailure": {
                              "type": "boolean",
                              "default": true
                            }
                          },
                          "additionalProperties": false
                        },
                        "progressVerbosityLevel": {
                          "type": "string",
                          "default": "info",
                          "example": "info",
                          "enum": [
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error",
                            "critical"
                          ]
                        },
                        "debugOverride": {
                          "type": "array",
                          "description": "A list of algorithms to debug in this execution",
                          "items": {
                            "type": "string"
                          },
                          "uniqueItems": true
                        }
                      },
                      "description": "optional properties"
                    },
                    "priority": {
                      "default": 3,
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 5,
                      "example": 3
                    },
                    "triggers": {
                      "type": "object",
                      "properties": {
                        "pipelines": {
                          "type": "array",
                          "description": "pipelines to activate upon result",
                          "items": {
                            "type": "string",
                            "minLength": 1
                          },
                          "uniqueItems": true
                        },
                        "cron": {
                          "type": "object",
                          "properties": {
                            "pattern": {
                              "type": "string",
                              "description": "cron job",
                              "minLength": 1,
                              "format": "cron"
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "enable or disable cron job",
                              "default": false
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "Array of tags",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "rootJobId": {
                      "type": "string",
                      "description": "the root job id of the current tree"
                    },
                    "streaming": {
                      "type": "object",
                      "description": "streaming options",
                      "properties": {
                        "defaultFlow": {
                          "type": "string",
                          "description": "the name of the default stream flow"
                        },
                        "flows": {
                          "type": "object",
                          "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                          "example": {
                            "main": "A >> B&C | B >> D | C >> E",
                            "second": "A >> B >> C"
                          }
                        }
                      }
                    },
                    "edges": {
                      "type": "array",
                      "description": "edges define relation between nodes",
                      "items": {},
                      "example": [
                        {
                          "source": "A",
                          "target": "B"
                        }
                      ]
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "pipeline conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "StorePipelines"
        ],
        "summary": "Update pipeline",
        "description": "Update existing pipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  },
                  "kind": {
                    "type": "string",
                    "default": "batch",
                    "example": "batch",
                    "enum": [
                      "batch",
                      "stream"
                    ]
                  },
                  "experimentName": {
                    "type": "string",
                    "description": "experiment name",
                    "default": "main",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "experiment-name"
                  },
                  "description": {
                    "type": "string",
                    "description": "pipeline description"
                  },
                  "nodes": {
                    "type": "array",
                    "description": "Array of nodes",
                    "items": {
                      "type": "object",
                      "properties": {
                        "nodeName": {
                          "type": "string",
                          "description": "Unique node identifier",
                          "minLength": 1
                        },
                        "algorithmName": {
                          "type": "string",
                          "description": "Unique identifier representing a specific algorithm",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "algorithm-name"
                        },
                        "input": {
                          "type": "array",
                          "description": "The input for the algorithm",
                          "items": {},
                          "default": []
                        },
                        "ttl": {
                          "type": "integer",
                          "description": "Algorithm execution time to live in seconds. 0 to disable",
                          "minimum": 0,
                          "example": 0
                        },
                        "includeInResult": {
                          "type": "boolean"
                        },
                        "metrics": {
                          "type": "object",
                          "properties": {
                            "tensorboard": {
                              "type": "boolean",
                              "description": "Should tensorboard metrics be collected."
                            }
                          }
                        },
                        "retry": {
                          "type": "object",
                          "properties": {
                            "policy": {
                              "type": "string",
                              "default": "OnCrash",
                              "enum": [
                                "Never",
                                "Always",
                                "OnError",
                                "OnCrash"
                              ]
                            },
                            "limit": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 3,
                              "example": 1
                            }
                          }
                        },
                        "batchOperation": {
                          "type": "string",
                          "enum": [
                            "indexed",
                            "cartesian"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "default": "algorithm",
                          "enum": [
                            "algorithm",
                            "pipeline",
                            "debug",
                            "dataSource",
                            "gateway",
                            "output",
                            "hyperparamsTuner"
                          ]
                        },
                        "spec": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Unique identifier representing a specific pipeline",
                                  "minLength": 1,
                                  "format": "pipeline-name"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "snapshot": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "snapshot"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "describe the output"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for output",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "gateway name",
                                  "minLength": 1,
                                  "maxLength": 32,
                                  "format": "gateway-name"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "describe the gateway"
                                },
                                "mem": {
                                  "type": "string",
                                  "description": "Memory allocated for streaming gateway",
                                  "format": "algorithm-memory",
                                  "default": "512Mi"
                                },
                                "cpu": {
                                  "type": "number",
                                  "description": "Cpu allocated for streaming gateway",
                                  "default": 0.5
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "nodeName"
                      ]
                    }
                  },
                  "flowInput": {
                    "type": "object",
                    "nullable": true,
                    "description": "input object"
                  },
                  "webhooks": {
                    "type": "object",
                    "properties": {
                      "progress": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon progress",
                        "example": "http://my-url-to-progress"
                      },
                      "result": {
                        "type": "string",
                        "format": "url",
                        "minLength": 1,
                        "description": "url to activate upon result",
                        "example": "http://my-url-to-result"
                      }
                    },
                    "additionalProperties": false
                  },
                  "options": {
                    "default": {},
                    "type": "object",
                    "properties": {
                      "ttl": {
                        "type": "integer",
                        "description": "pipeline time to live in seconds",
                        "minimum": 1,
                        "default": 3600,
                        "example": 3600
                      },
                      "batchTolerance": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "default": 80,
                        "example": 80
                      },
                      "concurrentPipelines": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10000,
                            "example": 1
                          },
                          "rejectOnFailure": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "additionalProperties": false
                      },
                      "progressVerbosityLevel": {
                        "type": "string",
                        "default": "info",
                        "example": "info",
                        "enum": [
                          "trace",
                          "debug",
                          "info",
                          "warn",
                          "error",
                          "critical"
                        ]
                      },
                      "debugOverride": {
                        "type": "array",
                        "description": "A list of algorithms to debug in this execution",
                        "items": {
                          "type": "string"
                        },
                        "uniqueItems": true
                      }
                    },
                    "description": "optional properties"
                  },
                  "priority": {
                    "default": 3,
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 3
                  },
                  "triggers": {
                    "type": "object",
                    "properties": {
                      "pipelines": {
                        "type": "array",
                        "description": "pipelines to activate upon result",
                        "items": {
                          "type": "string",
                          "minLength": 1
                        },
                        "uniqueItems": true
                      },
                      "cron": {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "string",
                            "description": "cron job",
                            "minLength": 1,
                            "format": "cron"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "enable or disable cron job",
                            "default": false
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "Array of tags",
                    "items": {
                      "type": "string",
                      "description": "Unique identifier representing a specific tag",
                      "minLength": 1,
                      "maxLength": 32
                    }
                  },
                  "rootJobId": {
                    "type": "string",
                    "description": "the root job id of the current tree"
                  },
                  "streaming": {
                    "type": "object",
                    "description": "streaming options",
                    "properties": {
                      "defaultFlow": {
                        "type": "string",
                        "description": "the name of the default stream flow"
                      },
                      "flows": {
                        "type": "object",
                        "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                        "example": {
                          "main": "A >> B&C | B >> D | C >> E",
                          "second": "A >> B >> C"
                        }
                      }
                    }
                  },
                  "edges": {
                    "type": "array",
                    "description": "edges define relation between nodes",
                    "items": {},
                    "example": [
                      {
                        "source": "A",
                        "target": "B"
                      }
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "an object representing all information needed for pipeline execution",
          "required": true
        },
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "kind": {
                      "type": "string",
                      "default": "batch",
                      "example": "batch",
                      "enum": [
                        "batch",
                        "stream"
                      ]
                    },
                    "experimentName": {
                      "type": "string",
                      "description": "experiment name",
                      "default": "main",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "experiment-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "pipeline description"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Array of nodes",
                      "items": {
                        "type": "object",
                        "properties": {
                          "nodeName": {
                            "type": "string",
                            "description": "Unique node identifier",
                            "minLength": 1
                          },
                          "algorithmName": {
                            "type": "string",
                            "description": "Unique identifier representing a specific algorithm",
                            "minLength": 1,
                            "maxLength": 32,
                            "format": "algorithm-name"
                          },
                          "input": {
                            "type": "array",
                            "description": "The input for the algorithm",
                            "items": {},
                            "default": []
                          },
                          "ttl": {
                            "type": "integer",
                            "description": "Algorithm execution time to live in seconds. 0 to disable",
                            "minimum": 0,
                            "example": 0
                          },
                          "includeInResult": {
                            "type": "boolean"
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "tensorboard": {
                                "type": "boolean",
                                "description": "Should tensorboard metrics be collected."
                              }
                            }
                          },
                          "retry": {
                            "type": "object",
                            "properties": {
                              "policy": {
                                "type": "string",
                                "default": "OnCrash",
                                "enum": [
                                  "Never",
                                  "Always",
                                  "OnError",
                                  "OnCrash"
                                ]
                              },
                              "limit": {
                                "type": "integer",
                                "minimum": 1,
                                "default": 3,
                                "example": 1
                              }
                            }
                          },
                          "batchOperation": {
                            "type": "string",
                            "enum": [
                              "indexed",
                              "cartesian"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "default": "algorithm",
                            "enum": [
                              "algorithm",
                              "pipeline",
                              "debug",
                              "dataSource",
                              "gateway",
                              "output",
                              "hyperparamsTuner"
                            ]
                          },
                          "spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Unique identifier representing a specific pipeline",
                                    "minLength": 1,
                                    "format": "pipeline-name"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "snapshot": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "name",
                                  "snapshot"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "describe the output"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for output",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "gateway name",
                                    "minLength": 1,
                                    "maxLength": 32,
                                    "format": "gateway-name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "describe the gateway"
                                  },
                                  "mem": {
                                    "type": "string",
                                    "description": "Memory allocated for streaming gateway",
                                    "format": "algorithm-memory",
                                    "default": "512Mi"
                                  },
                                  "cpu": {
                                    "type": "number",
                                    "description": "Cpu allocated for streaming gateway",
                                    "default": 0.5
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "nodeName"
                        ]
                      }
                    },
                    "flowInput": {
                      "type": "object",
                      "nullable": true,
                      "description": "input object"
                    },
                    "webhooks": {
                      "type": "object",
                      "properties": {
                        "progress": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon progress",
                          "example": "http://my-url-to-progress"
                        },
                        "result": {
                          "type": "string",
                          "format": "url",
                          "minLength": 1,
                          "description": "url to activate upon result",
                          "example": "http://my-url-to-result"
                        }
                      },
                      "additionalProperties": false
                    },
                    "options": {
                      "default": {},
                      "type": "object",
                      "properties": {
                        "ttl": {
                          "type": "integer",
                          "description": "pipeline time to live in seconds",
                          "minimum": 1,
                          "default": 3600,
                          "example": 3600
                        },
                        "batchTolerance": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 100,
                          "default": 80,
                          "example": 80
                        },
                        "concurrentPipelines": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 10000,
                              "example": 1
                            },
                            "rejectOnFailure": {
                              "type": "boolean",
                              "default": true
                            }
                          },
                          "additionalProperties": false
                        },
                        "progressVerbosityLevel": {
                          "type": "string",
                          "default": "info",
                          "example": "info",
                          "enum": [
                            "trace",
                            "debug",
                            "info",
                            "warn",
                            "error",
                            "critical"
                          ]
                        },
                        "debugOverride": {
                          "type": "array",
                          "description": "A list of algorithms to debug in this execution",
                          "items": {
                            "type": "string"
                          },
                          "uniqueItems": true
                        }
                      },
                      "description": "optional properties"
                    },
                    "priority": {
                      "default": 3,
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 5,
                      "example": 3
                    },
                    "triggers": {
                      "type": "object",
                      "properties": {
                        "pipelines": {
                          "type": "array",
                          "description": "pipelines to activate upon result",
                          "items": {
                            "type": "string",
                            "minLength": 1
                          },
                          "uniqueItems": true
                        },
                        "cron": {
                          "type": "object",
                          "properties": {
                            "pattern": {
                              "type": "string",
                              "description": "cron job",
                              "minLength": 1,
                              "format": "cron"
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "enable or disable cron job",
                              "default": false
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "Array of tags",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "rootJobId": {
                      "type": "string",
                      "description": "the root job id of the current tree"
                    },
                    "streaming": {
                      "type": "object",
                      "description": "streaming options",
                      "properties": {
                        "defaultFlow": {
                          "type": "string",
                          "description": "the name of the default stream flow"
                        },
                        "flows": {
                          "type": "object",
                          "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                          "example": {
                            "main": "A >> B&C | B >> D | C >> E",
                            "second": "A >> B >> C"
                          }
                        }
                      }
                    },
                    "edges": {
                      "type": "array",
                      "description": "edges define relation between nodes",
                      "items": {},
                      "example": [
                        {
                          "source": "A",
                          "target": "B"
                        }
                      ]
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/status/{jobId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Webhook status",
        "description": "Returns a webhook status for specific pipeline",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing pipeline execution",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pipeline result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "pipelineStatus": {
                      "type": "string"
                    },
                    "responseStatus": {
                      "type": "string"
                    },
                    "httpResponse": {
                      "type": "object",
                      "properties": {
                        "statusCode": {
                          "type": "string"
                        },
                        "statusMessage": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/results/{jobId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Webhook result",
        "description": "Returns a webhook result for specific pipeline",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing pipeline execution",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "pipelineStatus": {
                      "type": "string"
                    },
                    "responseStatus": {
                      "type": "string"
                    },
                    "httpResponse": {
                      "type": "object",
                      "properties": {
                        "statusCode": {
                          "type": "string"
                        },
                        "statusMessage": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "webhook Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/list/{jobId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Webhook list",
        "description": "Returns all webhooks for specific pipeline",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing pipeline execution",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pipeline result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "pipelineStatus": {
                      "type": "string"
                    },
                    "responseStatus": {
                      "type": "string"
                    },
                    "httpResponse": {
                      "type": "object",
                      "properties": {
                        "statusCode": {
                          "type": "string"
                        },
                        "statusMessage": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "webhook Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards/tensors": {
      "post": {
        "tags": [
          "Boards"
        ],
        "summary": "Start board",
        "description": "start board",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pipelineName": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  },
                  "nodeName": {
                    "type": "string"
                  },
                  "jobId": {
                    "type": "string"
                  },
                  "taskId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "start board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards/tensors/{id}": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Board details",
        "description": "Board details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier representing board",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "relativeUrl": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "board Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Boards"
        ],
        "summary": "Stop board",
        "description": "Stop board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier representing board",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "delete board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "board Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards/tensors/": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Board list",
        "description": "Board list",
        "responses": {
          "200": {
            "description": "start board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of boards",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "relativeUrl": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards/optunas": {
      "post": {
        "tags": [
          "Boards"
        ],
        "summary": "Start board",
        "description": "start board",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "start board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards/optunas/{id}": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Board details",
        "description": "Board details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier representing board",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "relativeUrl": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "board Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Boards"
        ],
        "summary": "Stop board",
        "description": "Stop board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier representing board",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "delete board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "board Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards/optunas/": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Board list",
        "description": "Board list",
        "responses": {
          "200": {
            "description": "start board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of boards",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "relativeUrl": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue/preferred": {
      "get": {
        "tags": [
          "Preferred"
        ],
        "summary": "Get preferred",
        "description": "Get preferred",
        "parameters": [
          {
            "name": "fromJob",
            "in": "query",
            "description": "from this job and on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toJob",
            "in": "query",
            "description": "up to this job",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "description": "number of records in page",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get preferred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hits": {
                      "type": "array",
                      "description": "the actual result records",
                      "items": {}
                    },
                    "cursor": {
                      "type": "string",
                      "description": "this cursor to the next query can be used for pagination"
                    },
                    "timeTook": {
                      "type": "string",
                      "description": "the query completion time took in milliseconds"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Preferred"
        ],
        "summary": "Add to preferred",
        "description": "Add to preferred",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobs": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    }
                  },
                  "position": {
                    "type": "string",
                    "enum": [
                      "first",
                      "last",
                      "before",
                      "after"
                    ]
                  },
                  "query": {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      },
                      "jobId": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      },
                      "pipeline": {
                        "type": "string",
                        "description": "Unique identifier representing a specific pipeline",
                        "minLength": 1,
                        "format": "pipeline-name"
                      }
                    }
                  }
                },
                "required": [
                  "jobs",
                  "position"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "start board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      }
                    },
                    "position": {
                      "type": "string",
                      "enum": [
                        "first",
                        "last",
                        "before",
                        "after"
                      ]
                    },
                    "query": {
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "description": "Unique identifier representing a specific tag",
                          "minLength": 1,
                          "maxLength": 32
                        },
                        "jobId": {
                          "type": "string",
                          "description": "Unique identifier representing pipeline execution"
                        },
                        "pipeline": {
                          "type": "string",
                          "description": "Unique identifier representing a specific pipeline",
                          "minLength": 1,
                          "format": "pipeline-name"
                        }
                      }
                    }
                  },
                  "required": [
                    "jobs",
                    "position"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue/preferred/deletes": {
      "post": {
        "tags": [
          "Preferred"
        ],
        "summary": "Remover from preferred",
        "description": "Remover from preferred",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobs": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    }
                  }
                },
                "required": [
                  "jobs"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "start board response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      }
                    }
                  },
                  "required": [
                    "jobs"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue/preferred/aggregation/pipeline": {
      "get": {
        "tags": [
          "Preferred"
        ],
        "summary": "Get preferred",
        "description": "Get preferred",
        "responses": {
          "200": {
            "description": "Get preferred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pipeline": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue/preferred/aggregation/tag": {
      "get": {
        "tags": [
          "Preferred"
        ],
        "summary": "Get preferred",
        "description": "Get preferred",
        "responses": {
          "200": {
            "description": "Get preferred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pipeline": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue/managed/aggregation/pipeline": {
      "get": {
        "tags": [
          "Managed"
        ],
        "summary": "Get preferred",
        "description": "Get preferred",
        "responses": {
          "200": {
            "description": "Get preferred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pipeline": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue/managed/aggregation/tag": {
      "get": {
        "tags": [
          "Managed"
        ],
        "summary": "Get preferred",
        "description": "Get preferred",
        "responses": {
          "200": {
            "description": "Get preferred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pipeline": {
                      "type": "string",
                      "description": "Unique identifier representing a specific pipeline",
                      "minLength": 1,
                      "format": "pipeline-name"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing a specific tag",
                        "minLength": 1,
                        "maxLength": 32
                      }
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Unique identifier representing pipeline execution"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue/managed/": {
      "get": {
        "tags": [
          "Managed"
        ],
        "summary": "Get Managed",
        "description": "Get managed",
        "parameters": [
          {
            "name": "fromJob",
            "in": "query",
            "description": "from this job and on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toJob",
            "in": "query",
            "description": "up to this job",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "number of records in page",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get managed jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hits": {
                      "type": "array",
                      "description": "the actual result records",
                      "items": {}
                    },
                    "cursor": {
                      "type": "string",
                      "description": "this cursor to the next query can be used for pagination"
                    },
                    "timeTook": {
                      "type": "string",
                      "description": "the query completion time took in milliseconds"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/builds/status/{buildId}": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get build status",
        "description": "returns the build status by specific build id",
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "Unique identifier representing build for algorithm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "algorithm apply response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "build Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/builds/list/{name}": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get build list",
        "description": "returns all builds that related to algorithm",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "algorithm apply list response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "build Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/builds/stop": {
      "post": {
        "tags": [
          "Builds"
        ],
        "summary": "Stop build",
        "description": "stop build",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "buildId": {
                    "type": "string",
                    "description": "Unique identifier representing build id"
                  }
                },
                "required": [
                  "buildId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "stop build response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "build Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/builds/rerun": {
      "post": {
        "tags": [
          "Builds"
        ],
        "summary": "Rerun build",
        "description": "rerun build",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "buildId": {
                    "type": "string",
                    "description": "Unique identifier representing build id"
                  }
                },
                "required": [
                  "buildId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "stop build response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "build Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/builds/webhook/github": {
      "post": {
        "tags": [
          "Builds"
        ],
        "summary": "Insert webhook for automating build after push",
        "description": "webhook for automating  build algorithm directly from github",
        "requestBody": {
          "content": {
            "application/x-www-from-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "github": {
                    "type": "object",
                    "description": "github object which received after push for more information https://developer.github.com/webhooks/"
                  }
                }
              }
            }
          },
          "description": "github webhook data",
          "required": true
        },
        "responses": {
          "201": {
            "description": "webhook created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/builds/webhook/gitlab": {
      "post": {
        "tags": [
          "Builds"
        ],
        "summary": "Insert webhook for automating build after push",
        "description": "webhook for automating  build algorithm directly from gitlab",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gitlab": {
                    "type": "object",
                    "description": "gitlab object which received after push for more information https://docs.gitlab.com/ee/user/project/integrations/webhooks.html"
                  }
                }
              }
            }
          },
          "description": "gitlab webhook data",
          "required": true
        },
        "responses": {
          "201": {
            "description": "webhook created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/readme/algorithms/{name}": {
      "get": {
        "tags": [
          "Algorithm Readme"
        ],
        "summary": "Get stored readme by name",
        "description": "Get stored readme by name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Algorithm Readme"
        ],
        "summary": "Insert new readme to algorithm",
        "description": "Insert new algorithm to store if not exists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "README.md": {
                    "type": "string",
                    "format": "binary",
                    "description": "the readme.md file name of the file must be README.md"
                  }
                }
              }
            }
          },
          "description": "algorithm readme to be added to the store",
          "required": true
        },
        "responses": {
          "201": {
            "description": "algorithm created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "algorithm conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Algorithm Readme"
        ],
        "summary": "Update readme to algorithm",
        "description": "Update algorithm's store if not exists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "README.md": {
                    "type": "string",
                    "format": "binary",
                    "description": "the readme.md file name of the file must be README.md"
                  }
                }
              }
            }
          },
          "description": "algorithm readme to be added to the store",
          "required": true
        },
        "responses": {
          "201": {
            "description": "algorithm readme updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "algorithm conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Algorithm Readme"
        ],
        "summary": "Delete algorithm",
        "description": "Delete existing algorithm from store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/readme/pipelines/{name}": {
      "get": {
        "tags": [
          "Pipeline Readme"
        ],
        "summary": "Get stored readme by name",
        "description": "Get stored readme by name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "pipelines name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pipeline Readme"
        ],
        "summary": "Insert new readme to pipelines",
        "description": "Insert new pipeline to store if not exists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "README.md": {
                    "type": "string",
                    "format": "binary",
                    "description": "the readme.md file name of the file must be README.md"
                  }
                }
              }
            }
          },
          "description": "pipeline readme to be added to the store",
          "required": true
        },
        "responses": {
          "201": {
            "description": "pipeline created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "pipeline conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pipeline Readme"
        ],
        "summary": "Update readme to pipeline",
        "description": "Update pipeline's store if not exists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "README.md": {
                    "type": "string",
                    "format": "binary",
                    "description": "the readme.md file name of the file must be README.md"
                  }
                }
              }
            }
          },
          "description": "pipeline readme to be added to the store",
          "required": true
        },
        "responses": {
          "201": {
            "description": "pipeline readme updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "pipeline conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pipeline Readme"
        ],
        "summary": "Delete pipeline",
        "description": "Delete existing pipeline from store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "pipeline name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions/algorithms/{name}": {
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Get algorithm versions",
        "description": "returns list of algorithm versions.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier representing a specific algorithm",
              "minLength": 1,
              "maxLength": 32,
              "format": "algorithm-name"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by asc or desc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique identifier representing a specific algorithm",
                        "minLength": 1,
                        "maxLength": 32,
                        "format": "algorithm-name"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "batch",
                          "stream"
                        ]
                      },
                      "env": {
                        "type": "string",
                        "enum": [
                          "nodejs",
                          "python",
                          "java"
                        ]
                      },
                      "algorithmImage": {
                        "type": "string",
                        "description": "image name as in the docker registry",
                        "format": "algorithm-image"
                      },
                      "cpu": {
                        "type": "number",
                        "default": 0.1,
                        "minimum": 0,
                        "description": "algorithm cpu"
                      },
                      "gpu": {
                        "type": "number",
                        "minimum": 0,
                        "description": "algorithm gpu"
                      },
                      "mem": {
                        "type": "string",
                        "description": "algorithm memory",
                        "format": "algorithm-memory",
                        "default": "256Mi",
                        "example": "512Mi"
                      },
                      "reservedMemory": {
                        "type": "string",
                        "nullable": true,
                        "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                        "format": "memory",
                        "example": "512Mi"
                      },
                      "options": {
                        "type": "object",
                        "properties": {
                          "devMode": {
                            "type": "boolean",
                            "description": "runs algorithm with mounted sources to allow rapid development cycles"
                          },
                          "pending": {
                            "type": "boolean",
                            "description": "pending algorithm",
                            "default": false
                          },
                          "opengl": {
                            "type": "boolean",
                            "description": "should algorithm support XGL context creation (mount X socket)"
                          }
                        },
                        "default": {}
                      },
                      "version": {
                        "type": "string",
                        "description": "Hkube's auto increment semantic versioning",
                        "readOnly": true
                      },
                      "mounts": {
                        "type": "array",
                        "nullable": true,
                        "description": "a list of volumes to mount into the algorithm",
                        "items": {
                          "type": "object",
                          "properties": {
                            "pvcName": {
                              "type": "string",
                              "format": "algorithm-mount-pvc",
                              "minLength": 1,
                              "description": "name of an existing kubernetes pvc (persistent volume claim)"
                            },
                            "path": {
                              "type": "string",
                              "format": "path",
                              "minLength": 1,
                              "description": "the mount path in the algorithm container"
                            },
                            "volumeType": {
                              "type": "string",
                              "description": "Special volume types such as emptyDir",
                              "enum": [
                                "emptyDir",
                                "configMap"
                              ]
                            }
                          },
                          "required": [
                            "pvcName",
                            "path"
                          ]
                        },
                        "uniqueItems": true,
                        "example": []
                      },
                      "gitRepository": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "a url for the git repository",
                            "format": "url"
                          },
                          "commit": {
                            "type": "object",
                            "description": "commit details",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "commit id"
                              },
                              "timestamp": {
                                "type": "string",
                                "description": "commit time"
                              },
                              "message": {
                                "type": "string",
                                "description": "commit message"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "branchName": {
                            "type": "string",
                            "default": "master",
                            "description": "the branch name you wish to create a build from"
                          },
                          "tag": {
                            "type": "string",
                            "description": "a specific tag which will trigger the build"
                          },
                          "token": {
                            "type": "string",
                            "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                          },
                          "gitKind": {
                            "type": "string",
                            "enum": [
                              "github",
                              "gitlab"
                            ],
                            "default": "github"
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      "entryPoint": {
                        "type": "string",
                        "nullable": true
                      },
                      "dependencyInstallCmd": {
                        "type": "string",
                        "nullable": true,
                        "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                      },
                      "baseImage": {
                        "type": "string",
                        "nullable": true,
                        "description": "Custom docker image to be used as base to the newly built algorithm image"
                      },
                      "minHotWorkers": {
                        "type": "integer",
                        "description": "how many live algorithm instances will always run",
                        "minimum": 0,
                        "default": 0
                      },
                      "maxWorkers": {
                        "type": "integer",
                        "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                        "minimum": 0,
                        "nullable": true
                      },
                      "quotaGuarantee": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                        "minimum": 0
                      },
                      "algorithmEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for algorithm"
                      },
                      "workerEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for worker"
                      },
                      "nodeSelector": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value labels for nodes constraint",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "labels": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for users"
                      },
                      "annotations": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                      },
                      "streamKind": {
                        "enum": [
                          "stateless",
                          "stateful"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "description": "type of algorithm code resource",
                        "enum": [
                          "Git",
                          "Code",
                          "Image"
                        ],
                        "default": "Image"
                      },
                      "downloadFileExt": {
                        "type": "string",
                        "nullable": true,
                        "description": "the extension name that will be attached to a file when downloading algorithm result"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions/algorithms/{name}/{version}": {
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Get version",
        "description": "returns algorithm version",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier representing a specific algorithm",
              "minLength": 1,
              "maxLength": 32,
              "format": "algorithm-name"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "algorithm version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique identifier representing a specific algorithm",
                        "minLength": 1,
                        "maxLength": 32,
                        "format": "algorithm-name"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "batch",
                          "stream"
                        ]
                      },
                      "env": {
                        "type": "string",
                        "enum": [
                          "nodejs",
                          "python",
                          "java"
                        ]
                      },
                      "algorithmImage": {
                        "type": "string",
                        "description": "image name as in the docker registry",
                        "format": "algorithm-image"
                      },
                      "cpu": {
                        "type": "number",
                        "default": 0.1,
                        "minimum": 0,
                        "description": "algorithm cpu"
                      },
                      "gpu": {
                        "type": "number",
                        "minimum": 0,
                        "description": "algorithm gpu"
                      },
                      "mem": {
                        "type": "string",
                        "description": "algorithm memory",
                        "format": "algorithm-memory",
                        "default": "256Mi",
                        "example": "512Mi"
                      },
                      "reservedMemory": {
                        "type": "string",
                        "nullable": true,
                        "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                        "format": "memory",
                        "example": "512Mi"
                      },
                      "options": {
                        "type": "object",
                        "properties": {
                          "devMode": {
                            "type": "boolean",
                            "description": "runs algorithm with mounted sources to allow rapid development cycles"
                          },
                          "pending": {
                            "type": "boolean",
                            "description": "pending algorithm",
                            "default": false
                          },
                          "opengl": {
                            "type": "boolean",
                            "description": "should algorithm support XGL context creation (mount X socket)"
                          }
                        },
                        "default": {}
                      },
                      "version": {
                        "type": "string",
                        "description": "Hkube's auto increment semantic versioning",
                        "readOnly": true
                      },
                      "mounts": {
                        "type": "array",
                        "nullable": true,
                        "description": "a list of volumes to mount into the algorithm",
                        "items": {
                          "type": "object",
                          "properties": {
                            "pvcName": {
                              "type": "string",
                              "format": "algorithm-mount-pvc",
                              "minLength": 1,
                              "description": "name of an existing kubernetes pvc (persistent volume claim)"
                            },
                            "path": {
                              "type": "string",
                              "format": "path",
                              "minLength": 1,
                              "description": "the mount path in the algorithm container"
                            },
                            "volumeType": {
                              "type": "string",
                              "description": "Special volume types such as emptyDir",
                              "enum": [
                                "emptyDir",
                                "configMap"
                              ]
                            }
                          },
                          "required": [
                            "pvcName",
                            "path"
                          ]
                        },
                        "uniqueItems": true,
                        "example": []
                      },
                      "gitRepository": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "a url for the git repository",
                            "format": "url"
                          },
                          "commit": {
                            "type": "object",
                            "description": "commit details",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "commit id"
                              },
                              "timestamp": {
                                "type": "string",
                                "description": "commit time"
                              },
                              "message": {
                                "type": "string",
                                "description": "commit message"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "branchName": {
                            "type": "string",
                            "default": "master",
                            "description": "the branch name you wish to create a build from"
                          },
                          "tag": {
                            "type": "string",
                            "description": "a specific tag which will trigger the build"
                          },
                          "token": {
                            "type": "string",
                            "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                          },
                          "gitKind": {
                            "type": "string",
                            "enum": [
                              "github",
                              "gitlab"
                            ],
                            "default": "github"
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      "entryPoint": {
                        "type": "string",
                        "nullable": true
                      },
                      "dependencyInstallCmd": {
                        "type": "string",
                        "nullable": true,
                        "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
                      },
                      "baseImage": {
                        "type": "string",
                        "nullable": true,
                        "description": "Custom docker image to be used as base to the newly built algorithm image"
                      },
                      "minHotWorkers": {
                        "type": "integer",
                        "description": "how many live algorithm instances will always run",
                        "minimum": 0,
                        "default": 0
                      },
                      "maxWorkers": {
                        "type": "integer",
                        "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                        "minimum": 0,
                        "nullable": true
                      },
                      "quotaGuarantee": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                        "minimum": 0
                      },
                      "algorithmEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for algorithm"
                      },
                      "workerEnv": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value environment variables for worker"
                      },
                      "nodeSelector": {
                        "type": "object",
                        "nullable": true,
                        "description": "key value labels for nodes constraint",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "labels": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for users"
                      },
                      "annotations": {
                        "type": "object",
                        "nullable": true,
                        "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
                      },
                      "streamKind": {
                        "enum": [
                          "stateless",
                          "stateful"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "description": "type of algorithm code resource",
                        "enum": [
                          "Git",
                          "Code",
                          "Image"
                        ],
                        "default": "Image"
                      },
                      "downloadFileExt": {
                        "type": "string",
                        "nullable": true,
                        "description": "the extension name that will be attached to a file when downloading algorithm result"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Versions"
        ],
        "summary": "Delete version",
        "description": "Delete existing algorithm version.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "algorithm name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier representing a specific algorithm",
              "minLength": 1,
              "maxLength": 32,
              "format": "algorithm-name"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "algorithm version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "algorithm Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions/algorithms/apply": {
      "post": {
        "tags": [
          "Versions"
        ],
        "summary": "Apply algorithm version",
        "description": "Change the current algorithm version",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific algorithm",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "algorithm-name"
                  },
                  "version": {
                    "type": "string",
                    "description": "Unique identifier representing version id",
                    "minLength": 1,
                    "maxLength": 10
                  },
                  "force": {
                    "type": "boolean",
                    "description": "should replace or not current algorithm version for running algorithm instances",
                    "default": false
                  }
                },
                "required": [
                  "name",
                  "version"
                ]
              }
            }
          },
          "description": "an object representing all information needed for stored pipeline execution",
          "required": true
        },
        "responses": {
          "200": {
            "description": "the OK string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions/algorithms/tag": {
      "post": {
        "tags": [
          "Versions"
        ],
        "summary": "Tag algorithm version",
        "description": "Tag algorithm version with pinned and tags",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific algorithm",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "algorithm-name"
                  },
                  "version": {
                    "type": "string",
                    "description": "Unique identifier representing version id",
                    "minLength": 1,
                    "maxLength": 10
                  },
                  "pinned": {
                    "type": "boolean",
                    "description": "Should set the version as pinned",
                    "default": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "Array of tags",
                    "items": {
                      "type": "string",
                      "description": "Unique identifier representing a specific tag",
                      "minLength": 1,
                      "maxLength": 32
                    }
                  }
                },
                "required": [
                  "name",
                  "version"
                ]
              }
            }
          },
          "description": "an object representing all information needed for stored pipeline execution",
          "required": true
        },
        "responses": {
          "200": {
            "description": "the OK string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/experiment/{name}": {
      "get": {
        "tags": [
          "Experiment"
        ],
        "summary": "get experiment details",
        "description": "get experiment details",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "experiment name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "experiment name",
                      "default": "main",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "experiment-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "describe the experiment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Experiment"
        ],
        "summary": "Delete experiment",
        "description": "Delete existing experiment from store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "experiment name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "experiment Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/experiment": {
      "get": {
        "tags": [
          "Experiment"
        ],
        "summary": "Get experiments list",
        "description": "Returns experiments list",
        "responses": {
          "200": {
            "description": "list of experiments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "experiment name",
                      "default": "main",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "experiment-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "describe the experiment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Experiment"
        ],
        "summary": "Insert experiment",
        "description": "Insert new experiment to store if not exists",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "experiment name",
                    "default": "main",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "experiment-name"
                  },
                  "description": {
                    "type": "string",
                    "description": "describe the experiment"
                  }
                }
              }
            }
          },
          "description": "experiment to be added to the store",
          "required": true
        },
        "responses": {
          "201": {
            "description": "experiment created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "pipeline conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gateway": {
      "get": {
        "tags": [
          "Gateway"
        ],
        "summary": "get gateways",
        "description": "get list of gateways",
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "gateway name",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "gateway-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "describe the gateway"
                    },
                    "mem": {
                      "type": "string",
                      "description": "Memory allocated for streaming gateway",
                      "format": "algorithm-memory",
                      "default": "512Mi"
                    },
                    "cpu": {
                      "type": "number",
                      "description": "Cpu allocated for streaming gateway",
                      "default": 0.5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gateway/{name}": {
      "get": {
        "tags": [
          "Gateway"
        ],
        "summary": "get gateway details",
        "description": "get gateway details",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "gateway name to get from the store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "gateway name",
                      "minLength": 1,
                      "maxLength": 32,
                      "format": "gateway-name"
                    },
                    "description": {
                      "type": "string",
                      "description": "describe the gateway"
                    },
                    "mem": {
                      "type": "string",
                      "description": "Memory allocated for streaming gateway",
                      "format": "algorithm-memory",
                      "default": "512Mi"
                    },
                    "cpu": {
                      "type": "number",
                      "description": "Cpu allocated for streaming gateway",
                      "default": 0.5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "pipeline Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gc/clean": {
      "post": {
        "tags": [
          "GC"
        ],
        "summary": "Clean all",
        "description": "Clean all",
        "requestBody": {
          "description": "message body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "maxAge": {
                    "type": "integer",
                    "description": "max age to clean (minutes)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gc/clean/{type}": {
      "post": {
        "tags": [
          "GC"
        ],
        "summary": "Clean by type",
        "description": "Clean by type",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "message body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "maxAge": {
                    "type": "integer",
                    "description": "max age to clean (minutes)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gc/dryrun": {
      "post": {
        "tags": [
          "GC"
        ],
        "summary": "DryRun all",
        "description": "DryRun all",
        "requestBody": {
          "description": "message body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "maxAge": {
                    "type": "integer",
                    "description": "max age to clean (minutes)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gc/dryrun/{type}": {
      "post": {
        "tags": [
          "GC"
        ],
        "summary": "DryRun by type",
        "description": "DryRun by type",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "message body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "maxAge": {
                    "type": "integer",
                    "description": "max age to clean (minutes)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gc/status": {
      "get": {
        "tags": [
          "GC"
        ],
        "summary": "Get all statuses",
        "description": "Get all statuses",
        "responses": {
          "200": {
            "description": "success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gc/status/{type}": {
      "get": {
        "tags": [
          "GC"
        ],
        "summary": "Get status by type",
        "description": "Get status by type",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/graph/raw/{jobId}": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Get graph as raw data",
        "description": "returns the graph data by jobId",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "algorithm apply response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    },
                    "timestamp": {
                      "type": "number"
                    },
                    "edges": {
                      "type": "array",
                      "description": "Array of edges"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Array of nodes"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "build Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/graph/parsed/{jobId}": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Query the pipeline graph",
        "description": "returns the graph data by jobId, node and tasks",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Unique identifier representing jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "query",
            "description": "the node name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by status, error or any other property",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by asc or desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "the start index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the end index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "algorithm apply response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "Unique identifier representing pipeline execution"
                    },
                    "timestamp": {
                      "type": "number"
                    },
                    "edges": {
                      "type": "array",
                      "description": "Array of edges"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Array of nodes"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "jobId Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/info": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage info",
        "description": "returns the storage info",
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/prefix/types": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage types",
        "description": "returns the storage types that managed by Hkube",
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/prefixes/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get all prefixes by path",
        "description": "returns all available prefixes found in storage according to path",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "path to storage",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by status, error or any other property",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by asc or desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "the start index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the start index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/keys/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get all keys by path",
        "description": "returns all available keys found in storage according to path",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "path to storage",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by status, error or any other property",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "order by asc or desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "the start index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the end index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/values/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get storage data",
        "description": "returns the storage data",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "path to storage",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/stream/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "stream data",
        "description": "stream data according to path",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "path to storage",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/stream/custom/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "stream data",
        "description": "stream data according to path",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "path to storage",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/download/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "stream data to file",
        "description": "download data as file according to path",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "path to storage",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/download/custom/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "stream data to file",
        "description": "download data as file according to path",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "path to storage",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/storage/download/pipeline/result/{jobId}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "stream data to file",
        "description": "download data as file according to path",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "the pipeline jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "storage response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "path Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/status/version": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get system status",
        "description": "Get system status such as version and health",
        "responses": {
          "200": {
            "description": "action summery",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "algorithm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific algorithm",
            "minLength": 1,
            "maxLength": 32,
            "format": "algorithm-name"
          },
          "kind": {
            "type": "string",
            "enum": [
              "batch",
              "stream"
            ]
          },
          "env": {
            "type": "string",
            "enum": [
              "nodejs",
              "python",
              "java"
            ]
          },
          "algorithmImage": {
            "type": "string",
            "description": "image name as in the docker registry",
            "format": "algorithm-image"
          },
          "cpu": {
            "type": "number",
            "default": 0.1,
            "minimum": 0,
            "description": "algorithm cpu"
          },
          "gpu": {
            "type": "number",
            "minimum": 0,
            "description": "algorithm gpu"
          },
          "mem": {
            "type": "string",
            "description": "algorithm memory",
            "format": "algorithm-memory",
            "default": "256Mi",
            "example": "512Mi"
          },
          "reservedMemory": {
            "type": "string",
            "nullable": true,
            "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
            "format": "memory",
            "example": "512Mi"
          },
          "options": {
            "type": "object",
            "properties": {
              "devMode": {
                "type": "boolean",
                "description": "runs algorithm with mounted sources to allow rapid development cycles"
              },
              "pending": {
                "type": "boolean",
                "description": "pending algorithm",
                "default": false
              },
              "opengl": {
                "type": "boolean",
                "description": "should algorithm support XGL context creation (mount X socket)"
              }
            },
            "default": {}
          },
          "version": {
            "type": "string",
            "description": "Hkube's auto increment semantic versioning",
            "readOnly": true
          },
          "mounts": {
            "type": "array",
            "nullable": true,
            "description": "a list of volumes to mount into the algorithm",
            "items": {
              "type": "object",
              "properties": {
                "pvcName": {
                  "type": "string",
                  "format": "algorithm-mount-pvc",
                  "minLength": 1,
                  "description": "name of an existing kubernetes pvc (persistent volume claim)"
                },
                "path": {
                  "type": "string",
                  "format": "path",
                  "minLength": 1,
                  "description": "the mount path in the algorithm container"
                },
                "volumeType": {
                  "type": "string",
                  "description": "Special volume types such as emptyDir",
                  "enum": [
                    "emptyDir",
                    "configMap"
                  ]
                }
              },
              "required": [
                "pvcName",
                "path"
              ]
            },
            "uniqueItems": true,
            "example": []
          },
          "gitRepository": {
            "type": "object",
            "nullable": true,
            "properties": {
              "url": {
                "type": "string",
                "description": "a url for the git repository",
                "format": "url"
              },
              "commit": {
                "type": "object",
                "description": "commit details",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "commit id"
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "commit time"
                  },
                  "message": {
                    "type": "string",
                    "description": "commit message"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "branchName": {
                "type": "string",
                "default": "master",
                "description": "the branch name you wish to create a build from"
              },
              "tag": {
                "type": "string",
                "description": "a specific tag which will trigger the build"
              },
              "token": {
                "type": "string",
                "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
              },
              "gitKind": {
                "type": "string",
                "enum": [
                  "github",
                  "gitlab"
                ],
                "default": "github"
              }
            },
            "required": [
              "url"
            ]
          },
          "entryPoint": {
            "type": "string",
            "nullable": true
          },
          "dependencyInstallCmd": {
            "type": "string",
            "nullable": true,
            "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
          },
          "baseImage": {
            "type": "string",
            "nullable": true,
            "description": "Custom docker image to be used as base to the newly built algorithm image"
          },
          "minHotWorkers": {
            "type": "integer",
            "description": "how many live algorithm instances will always run",
            "minimum": 0,
            "default": 0
          },
          "maxWorkers": {
            "type": "integer",
            "description": "Maximum number of workers for this algorithm. 0 marks no limit",
            "minimum": 0,
            "nullable": true
          },
          "quotaGuarantee": {
            "type": "integer",
            "nullable": true,
            "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
            "minimum": 0
          },
          "algorithmEnv": {
            "type": "object",
            "nullable": true,
            "description": "key value environment variables for algorithm"
          },
          "workerEnv": {
            "type": "object",
            "nullable": true,
            "description": "key value environment variables for worker"
          },
          "nodeSelector": {
            "type": "object",
            "nullable": true,
            "description": "key value labels for nodes constraint",
            "additionalProperties": {
              "type": "string"
            }
          },
          "labels": {
            "type": "object",
            "nullable": true,
            "description": "attach key value metadata to algorithm pod, usually for users"
          },
          "annotations": {
            "type": "object",
            "nullable": true,
            "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
          },
          "streamKind": {
            "enum": [
              "stateless",
              "stateful"
            ]
          },
          "type": {
            "type": "string",
            "description": "type of algorithm code resource",
            "enum": [
              "Git",
              "Code",
              "Image"
            ],
            "default": "Image"
          },
          "downloadFileExt": {
            "type": "string",
            "nullable": true,
            "description": "the extension name that will be attached to a file when downloading algorithm result"
          }
        },
        "required": [
          "name"
        ]
      },
      "algorithmKind": {
        "type": "string",
        "enum": [
          "batch",
          "stream"
        ]
      },
      "algorithmName": {
        "type": "string",
        "description": "Unique identifier representing a specific algorithm",
        "minLength": 1,
        "maxLength": 32,
        "format": "algorithm-name"
      },
      "algorithmNameObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific algorithm",
            "minLength": 1,
            "maxLength": 32,
            "format": "algorithm-name"
          }
        },
        "required": [
          "name"
        ]
      },
      "algorithmDelete": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific algorithm",
            "minLength": 1,
            "maxLength": 32,
            "format": "algorithm-name"
          },
          "force": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "name"
        ]
      },
      "algorithmImage": {
        "type": "string",
        "description": "image name as in the docker registry",
        "format": "algorithm-image"
      },
      "algorithmMount": {
        "type": "object",
        "properties": {
          "pvcName": {
            "type": "string",
            "format": "algorithm-mount-pvc",
            "minLength": 1,
            "description": "name of an existing kubernetes pvc (persistent volume claim)"
          },
          "path": {
            "type": "string",
            "format": "path",
            "minLength": 1,
            "description": "the mount path in the algorithm container"
          },
          "volumeType": {
            "type": "string",
            "description": "Special volume types such as emptyDir",
            "enum": [
              "emptyDir",
              "configMap"
            ]
          }
        },
        "required": [
          "pvcName",
          "path"
        ]
      },
      "algorithmEnv": {
        "type": "string",
        "enum": [
          "nodejs",
          "python",
          "java"
        ]
      },
      "algorithmFileExt": {
        "type": "string",
        "enum": [
          "zip",
          "gz"
        ]
      },
      "algorithmVersionId": {
        "type": "string",
        "description": "Unique identifier representing version id",
        "minLength": 1,
        "maxLength": 10
      },
      "applyAlgorithmVersion": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific algorithm",
            "minLength": 1,
            "maxLength": 32,
            "format": "algorithm-name"
          },
          "version": {
            "type": "string",
            "description": "Unique identifier representing version id",
            "minLength": 1,
            "maxLength": 10
          },
          "force": {
            "type": "boolean",
            "description": "should replace or not current algorithm version for running algorithm instances",
            "default": false
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "algorithmVersionTag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific algorithm",
            "minLength": 1,
            "maxLength": 32,
            "format": "algorithm-name"
          },
          "version": {
            "type": "string",
            "description": "Unique identifier representing version id",
            "minLength": 1,
            "maxLength": 10
          },
          "pinned": {
            "type": "boolean",
            "description": "Should set the version as pinned",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "Array of tags",
            "items": {
              "type": "string",
              "description": "Unique identifier representing a specific tag",
              "minLength": 1,
              "maxLength": 32
            }
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "algorithmApplyOptions": {
        "type": "object",
        "properties": {
          "forceUpdate": {
            "type": "boolean",
            "description": "should set the newly created version as current",
            "default": false
          },
          "forceBuild": {
            "type": "boolean",
            "description": "should force new build",
            "default": false
          }
        }
      },
      "algorithmApplyResponse": {
        "type": "object",
        "properties": {
          "buildId": {
            "type": "string",
            "description": "Pipeline name"
          },
          "algorithm": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Unique identifier representing a specific algorithm",
                "minLength": 1,
                "maxLength": 32,
                "format": "algorithm-name"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "batch",
                  "stream"
                ]
              },
              "env": {
                "type": "string",
                "enum": [
                  "nodejs",
                  "python",
                  "java"
                ]
              },
              "algorithmImage": {
                "type": "string",
                "description": "image name as in the docker registry",
                "format": "algorithm-image"
              },
              "cpu": {
                "type": "number",
                "default": 0.1,
                "minimum": 0,
                "description": "algorithm cpu"
              },
              "gpu": {
                "type": "number",
                "minimum": 0,
                "description": "algorithm gpu"
              },
              "mem": {
                "type": "string",
                "description": "algorithm memory",
                "format": "algorithm-memory",
                "default": "256Mi",
                "example": "512Mi"
              },
              "reservedMemory": {
                "type": "string",
                "nullable": true,
                "description": "Reserved memory for HKube's operations such as in-memory cache, higher value means faster data retrieval and less algorithm memory, lower value means slower data retrieval and more algorithm memory",
                "format": "memory",
                "example": "512Mi"
              },
              "options": {
                "type": "object",
                "properties": {
                  "devMode": {
                    "type": "boolean",
                    "description": "runs algorithm with mounted sources to allow rapid development cycles"
                  },
                  "pending": {
                    "type": "boolean",
                    "description": "pending algorithm",
                    "default": false
                  },
                  "opengl": {
                    "type": "boolean",
                    "description": "should algorithm support XGL context creation (mount X socket)"
                  }
                },
                "default": {}
              },
              "version": {
                "type": "string",
                "description": "Hkube's auto increment semantic versioning",
                "readOnly": true
              },
              "mounts": {
                "type": "array",
                "nullable": true,
                "description": "a list of volumes to mount into the algorithm",
                "items": {
                  "type": "object",
                  "properties": {
                    "pvcName": {
                      "type": "string",
                      "format": "algorithm-mount-pvc",
                      "minLength": 1,
                      "description": "name of an existing kubernetes pvc (persistent volume claim)"
                    },
                    "path": {
                      "type": "string",
                      "format": "path",
                      "minLength": 1,
                      "description": "the mount path in the algorithm container"
                    },
                    "volumeType": {
                      "type": "string",
                      "description": "Special volume types such as emptyDir",
                      "enum": [
                        "emptyDir",
                        "configMap"
                      ]
                    }
                  },
                  "required": [
                    "pvcName",
                    "path"
                  ]
                },
                "uniqueItems": true,
                "example": []
              },
              "gitRepository": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "a url for the git repository",
                    "format": "url"
                  },
                  "commit": {
                    "type": "object",
                    "description": "commit details",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "commit id"
                      },
                      "timestamp": {
                        "type": "string",
                        "description": "commit time"
                      },
                      "message": {
                        "type": "string",
                        "description": "commit message"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "branchName": {
                    "type": "string",
                    "default": "master",
                    "description": "the branch name you wish to create a build from"
                  },
                  "tag": {
                    "type": "string",
                    "description": "a specific tag which will trigger the build"
                  },
                  "token": {
                    "type": "string",
                    "description": "a token which allows hkube's build system to access private repositories more information https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"
                  },
                  "gitKind": {
                    "type": "string",
                    "enum": [
                      "github",
                      "gitlab"
                    ],
                    "default": "github"
                  }
                },
                "required": [
                  "url"
                ]
              },
              "entryPoint": {
                "type": "string",
                "nullable": true
              },
              "dependencyInstallCmd": {
                "type": "string",
                "nullable": true,
                "description": "Command to run to install algorithm dependencies. CWD is the algorithm root folder\nDefaults to language specific defaults.\ne.g. For python: pip install -r requirements.txt\n"
              },
              "baseImage": {
                "type": "string",
                "nullable": true,
                "description": "Custom docker image to be used as base to the newly built algorithm image"
              },
              "minHotWorkers": {
                "type": "integer",
                "description": "how many live algorithm instances will always run",
                "minimum": 0,
                "default": 0
              },
              "maxWorkers": {
                "type": "integer",
                "description": "Maximum number of workers for this algorithm. 0 marks no limit",
                "minimum": 0,
                "nullable": true
              },
              "quotaGuarantee": {
                "type": "integer",
                "nullable": true,
                "description": "The amount of algorithms required to be scheduled first in a case of cluster pressure",
                "minimum": 0
              },
              "algorithmEnv": {
                "type": "object",
                "nullable": true,
                "description": "key value environment variables for algorithm"
              },
              "workerEnv": {
                "type": "object",
                "nullable": true,
                "description": "key value environment variables for worker"
              },
              "nodeSelector": {
                "type": "object",
                "nullable": true,
                "description": "key value labels for nodes constraint",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "type": "object",
                "nullable": true,
                "description": "attach key value metadata to algorithm pod, usually for users"
              },
              "annotations": {
                "type": "object",
                "nullable": true,
                "description": "attach key value metadata to algorithm pod, usually for tools and libraries"
              },
              "streamKind": {
                "enum": [
                  "stateless",
                  "stateful"
                ]
              },
              "type": {
                "type": "string",
                "description": "type of algorithm code resource",
                "enum": [
                  "Git",
                  "Code",
                  "Image"
                ],
                "default": "Image"
              },
              "downloadFileExt": {
                "type": "string",
                "nullable": true,
                "description": "the extension name that will be attached to a file when downloading algorithm result"
              }
            },
            "required": [
              "name"
            ]
          },
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "algorithmBuild": {
        "type": "object",
        "properties": {
          "fileExt": {
            "type": "string",
            "enum": [
              "zip",
              "gz"
            ]
          },
          "env": {
            "type": "string",
            "enum": [
              "nodejs",
              "python",
              "java"
            ]
          }
        },
        "required": [
          "env"
        ]
      },
      "kubernetesValueFrom": {
        "type": "string",
        "enum": [
          "fieldRef",
          "configMapKeyRef",
          "resourceFieldRef",
          "secretKeyRef"
        ]
      },
      "createBoardRequest": {
        "type": "object",
        "properties": {
          "pipelineName": {
            "type": "string",
            "description": "Unique identifier representing a specific pipeline",
            "minLength": 1,
            "format": "pipeline-name"
          },
          "nodeName": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          }
        }
      },
      "createOptunaboardRequest": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          }
        }
      },
      "createBoardResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "getBoardResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "relativeUrl": {
            "type": "string"
          }
        }
      },
      "listBoardResponse": {
        "type": "array",
        "description": "Array of boards",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "relativeUrl": {
              "type": "string"
            }
          }
        }
      },
      "metrics": {
        "type": "object",
        "properties": {
          "tensorboard": {
            "type": "boolean",
            "description": "Should tensorboard metrics be collected."
          }
        }
      },
      "addToPreferredRequest": {
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique identifier representing pipeline execution"
            }
          },
          "position": {
            "type": "string",
            "enum": [
              "first",
              "last",
              "before",
              "after"
            ]
          },
          "query": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "string",
                "description": "Unique identifier representing a specific tag",
                "minLength": 1,
                "maxLength": 32
              },
              "jobId": {
                "type": "string",
                "description": "Unique identifier representing pipeline execution"
              },
              "pipeline": {
                "type": "string",
                "description": "Unique identifier representing a specific pipeline",
                "minLength": 1,
                "format": "pipeline-name"
              }
            }
          }
        },
        "required": [
          "jobs",
          "position"
        ]
      },
      "removeFromPreferredRequest": {
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique identifier representing pipeline execution"
            }
          }
        },
        "required": [
          "jobs"
        ]
      },
      "preferredQuery": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Unique identifier representing a specific tag",
            "minLength": 1,
            "maxLength": 32
          },
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          },
          "pipeline": {
            "type": "string",
            "description": "Unique identifier representing a specific pipeline",
            "minLength": 1,
            "format": "pipeline-name"
          }
        }
      },
      "jobsAggregationResponse": {
        "type": "object",
        "properties": {
          "pipeline": {
            "type": "string",
            "description": "Unique identifier representing a specific pipeline",
            "minLength": 1,
            "format": "pipeline-name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique identifier representing a specific tag",
              "minLength": 1,
              "maxLength": 32
            }
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Unique identifier representing pipeline execution"
            }
          }
        }
      },
      "buildId": {
        "type": "object",
        "properties": {
          "buildId": {
            "type": "string",
            "description": "Unique identifier representing build id"
          }
        },
        "required": [
          "buildId"
        ]
      },
      "buildIdObject": {
        "type": "object",
        "properties": {
          "buildId": {
            "type": "string"
          }
        },
        "required": [
          "buildId"
        ]
      },
      "defaultResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "defaultResponseWithName": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "jobId": {
        "type": "string",
        "description": "Unique identifier representing pipeline execution"
      },
      "jobIdObject": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          }
        },
        "required": [
          "jobId"
        ]
      },
      "tag": {
        "type": "string",
        "description": "Unique identifier representing a specific tag",
        "minLength": 1,
        "maxLength": 32
      },
      "queryList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "default": ""
          },
          "experimentName": {
            "type": "string",
            "description": "experiment name",
            "default": "main",
            "minLength": 1,
            "maxLength": 32,
            "format": "experiment-name"
          },
          "sort": {
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "limit": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 100000
          }
        },
        "required": [
          "name"
        ]
      },
      "queryRange": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "string"
          },
          "order": {
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "from": {
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          "to": {
            "type": "integer",
            "default": 10,
            "minimum": 0
          }
        }
      },
      "cronPattern": {
        "type": "string",
        "description": "cron job",
        "minLength": 1,
        "format": "cron"
      },
      "cronRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific pipeline",
            "minLength": 1,
            "format": "pipeline-name"
          },
          "pattern": {
            "type": "string",
            "description": "cron job",
            "minLength": 1,
            "format": "cron"
          }
        },
        "required": [
          "name"
        ]
      },
      "dataSource-name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "dataSource-snapshot": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "snapshot": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "name",
          "snapshot"
        ]
      },
      "dataSource-id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "Files": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Data file (file types: *)",
          "format": "binary"
        }
      },
      "FileMeta": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "uploadedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "path"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "DataSourceMeta": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 24,
            "maxLength": 24
          },
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific dataSource",
            "minLength": 1,
            "maxLength": 32,
            "format": "dataSource-name"
          },
          "versionDescription": {
            "type": "string",
            "minLength": 1
          },
          "filesCount": {
            "type": "number"
          },
          "avgFileSize": {
            "type": "string"
          },
          "totalSize": {
            "type": "number"
          },
          "fileTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "commitHash": {
            "description": "a commit hash",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific dataSource",
            "minLength": 1,
            "maxLength": 32,
            "format": "dataSource-name"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "type": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "uploadedAt": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "name",
                "path"
              ]
            }
          },
          "versionDescription": {
            "description": "a commit message supplied by the user",
            "type": "string"
          },
          "gitRepositoryUrl": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "DataSourceId": {
        "type": "string",
        "minLength": 24,
        "maxLength": 24
      },
      "DataSourceWithMeta": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 24,
                "maxLength": 24
              },
              "name": {
                "type": "string",
                "description": "Unique identifier representing a specific dataSource",
                "minLength": 1,
                "maxLength": 32,
                "format": "dataSource-name"
              },
              "versionDescription": {
                "type": "string",
                "minLength": 1
              },
              "filesCount": {
                "type": "number"
              },
              "avgFileSize": {
                "type": "string"
              },
              "totalSize": {
                "type": "number"
              },
              "fileTypes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "commitHash": {
                "description": "a commit hash",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "Unique identifier representing a specific dataSource",
                "minLength": 1,
                "maxLength": 32,
                "format": "dataSource-name"
              },
              "files": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "uploadedAt": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "path"
                  ]
                }
              },
              "versionDescription": {
                "description": "a commit message supplied by the user",
                "type": "string"
              },
              "gitRepositoryUrl": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "id"
            ]
          }
        ]
      },
      "DataSourceName": {
        "type": "string",
        "description": "Unique identifier representing a specific dataSource",
        "minLength": 1,
        "maxLength": 32,
        "format": "dataSource-name"
      },
      "DataSourceVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 24,
            "maxLength": 24
          },
          "versionDescription": {
            "type": "string",
            "minLength": 1
          },
          "commitHash": {
            "type": "string"
          }
        }
      },
      "VersionDescription": {
        "type": "string",
        "minLength": 1
      },
      "dataSourceExists": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific dataSource",
            "minLength": 1,
            "maxLength": 32,
            "format": "dataSource-name"
          },
          "id": {
            "type": "string",
            "minLength": 24,
            "maxLength": 24
          },
          "snapshot": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 25
              }
            }
          }
        }
      },
      "SnapshotName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 25
      },
      "SnapshotQuery": {
        "type": "string",
        "minLength": 1
      },
      "SnapshotRequest": {
        "type": "object",
        "properties": {
          "snapshot": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 25
              },
              "query": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        },
        "required": [
          "name",
          "query"
        ]
      },
      "SnapshotCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25
          },
          "query": {
            "type": "string",
            "minLength": 1
          },
          "dataSource": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 24,
                "maxLength": 24
              },
              "name": {
                "type": "string",
                "description": "Unique identifier representing a specific dataSource",
                "minLength": 1,
                "maxLength": 32,
                "format": "dataSource-name"
              }
            }
          }
        },
        "required": [
          "name",
          "query",
          "dataSource"
        ]
      },
      "Snapshot": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "snapshot": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 25
                  },
                  "query": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            },
            "required": [
              "name",
              "query"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 25
              },
              "dataSource": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "minLength": 24,
                    "maxLength": 24
                  },
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific dataSource",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "dataSource-name"
                  },
                  "filteredFilesList": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "path": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "uploadedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "path"
                      ]
                    }
                  },
                  "droppedFiles": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "path": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "uploadedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "path"
                      ]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ResolvedSnapshot": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25
          },
          "query": {
            "type": "string",
            "minLength": 1
          },
          "dataSource": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "commitHash": {
                "description": "a commit hash",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "Unique identifier representing a specific dataSource",
                "minLength": 1,
                "maxLength": 32,
                "format": "dataSource-name"
              },
              "files": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "uploadedAt": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "path"
                  ]
                }
              },
              "versionDescription": {
                "description": "a commit message supplied by the user",
                "type": "string"
              },
              "gitRepositoryUrl": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "id"
            ]
          }
        }
      },
      "SnapshotPreviewRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 24,
            "maxLength": 24
          },
          "query": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "query",
          "id"
        ]
      },
      "createRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific dataSource",
            "minLength": 1,
            "maxLength": 32,
            "format": "dataSource-name"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Data file (file types: *)",
              "format": "binary"
            }
          },
          "storage": {
            "type": "object",
            "description": "Contains the credentials and storage information of \nan S3 bucket, If kind is set to \"internal\" \nno other parameters are required\n",
            "oneOf": [
              {
                "properties": {
                  "kind": {
                    "type": "string",
                    "enum": [
                      "S3"
                    ]
                  },
                  "accessKeyId": {
                    "type": "string"
                  },
                  "secretAccessKey": {
                    "type": "string"
                  },
                  "endpoint": {
                    "type": "string",
                    "minLength": 1,
                    "format": "url"
                  },
                  "bucketName": {
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "accessKeyId",
                  "secretAccessKey",
                  "endpoint",
                  "bucketName"
                ]
              },
              {
                "properties": {
                  "kind": {
                    "type": "string",
                    "enum": [
                      "internal"
                    ]
                  }
                },
                "required": [
                  "kind"
                ]
              }
            ]
          },
          "git": {
            "type": "object",
            "description": "Contains the credentials and Git information,\nIf kind is set to \"internal\" \nno other parameters are required\n",
            "oneOf": [
              {
                "properties": {
                  "repositoryUrl": {
                    "description": "provide a url to an empty git repository",
                    "type": "string",
                    "minLength": 1,
                    "format": "git-url"
                  },
                  "token": {
                    "type": "string"
                  },
                  "tokenName": {
                    "description": "the token name is *required* when using a *gitlab* account",
                    "type": "string"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "github",
                      "gitlab"
                    ]
                  }
                },
                "required": [
                  "repositoryUrl",
                  "token",
                  "kind"
                ]
              },
              {
                "properties": {
                  "kind": {
                    "type": "string",
                    "enum": [
                      "internal"
                    ]
                  }
                },
                "required": [
                  "kind"
                ]
              }
            ]
          }
        },
        "required": [
          "name",
          "files",
          "storage",
          "git"
        ]
      },
      "updateRequest": {
        "type": "object",
        "properties": {
          "versionDescription": {
            "type": "string",
            "minLength": 1
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Data file (file types: *)",
              "format": "binary"
            }
          },
          "droppedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mapping": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "type": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "uploadedAt": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "name",
                "path"
              ]
            }
          }
        },
        "anyOf": [
          {
            "required": [
              "versionDescription",
              "filesDropped"
            ]
          },
          {
            "required": [
              "versionDescription",
              "files"
            ]
          }
        ]
      },
      "deleteRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific dataSource",
            "minLength": 1,
            "maxLength": 32,
            "format": "dataSource-name"
          }
        },
        "required": [
          "name"
        ]
      },
      "update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific dataSource",
            "minLength": 1,
            "maxLength": 32,
            "format": "dataSource-name"
          },
          "versionDescription": {
            "type": "string",
            "minLength": 1
          },
          "files": {
            "type": "object",
            "properties": {
              "mapping": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "uploadedAt": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "path"
                  ]
                }
              },
              "added": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Data file (file types: *)",
                  "format": "binary"
                }
              },
              "dropped": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "syncRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateDownloadLinkRequest": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "string",
            "minLength": 24,
            "maxLength": 24
          },
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        },
        "required": [
          "dataSourceId",
          "fileIds"
        ]
      },
      "DownloadId": {
        "type": "string",
        "description": "Unique identifier representing a downloadId",
        "minLength": 4,
        "maxLength": 4,
        "format": "download-id"
      },
      "Credentials": {
        "type": "object",
        "properties": {
          "git": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "tokenName": {
                "type": "string"
              }
            },
            "required": [
              "token"
            ]
          },
          "storage": {
            "type": "object",
            "properties": {
              "accessKeyId": {
                "type": "string"
              },
              "secretAccessKey": {
                "type": "string"
              }
            },
            "required": [
              "accessKeyId",
              "secretAccessKey"
            ]
          }
        }
      },
      "updateCredentials": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific dataSource",
            "minLength": 1,
            "maxLength": 32,
            "format": "dataSource-name"
          },
          "credentials": {
            "type": "object",
            "properties": {
              "git": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "tokenName": {
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ]
              },
              "storage": {
                "type": "object",
                "properties": {
                  "accessKeyId": {
                    "type": "string"
                  },
                  "secretAccessKey": {
                    "type": "string"
                  }
                },
                "required": [
                  "accessKeyId",
                  "secretAccessKey"
                ]
              }
            }
          }
        },
        "required": [
          "name",
          "credentials"
        ]
      },
      "URL": {
        "type": "string",
        "minLength": 1,
        "format": "url"
      },
      "GitURL": {
        "type": "string",
        "minLength": 1,
        "format": "git-url"
      },
      "caching": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          },
          "nodeName": {
            "type": "string",
            "description": "Unique node identifier",
            "minLength": 1
          },
          "debug": {
            "type": "boolean",
            "description": "Run as debug"
          }
        },
        "additionalProperties": false,
        "required": [
          "jobId",
          "nodeName"
        ]
      },
      "execTreeNode": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pipeline name"
          },
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          }
        }
      },
      "execTreeResult": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Pipeline name"
            },
            "jobId": {
              "type": "string",
              "description": "Unique identifier representing pipeline execution"
            }
          }
        }
      },
      "stopRequest": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          },
          "reason": {
            "type": "string",
            "default": "requested by user",
            "description": "reason for stop pipeline"
          }
        },
        "required": [
          "jobId"
        ]
      },
      "pauseRequest": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          }
        },
        "required": [
          "jobId"
        ]
      },
      "resumeRequest": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          }
        },
        "required": [
          "jobId"
        ]
      },
      "execAlgorithmRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific algorithm",
            "minLength": 1,
            "maxLength": 32,
            "format": "algorithm-name"
          },
          "input": {
            "type": "array",
            "description": "The input for the algorithm",
            "items": {},
            "default": []
          },
          "debug": {
            "type": "boolean",
            "description": "Is debug algorithm",
            "default": false
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "searchJobs": {
        "type": "object",
        "properties": {
          "query": {
            "type": "object",
            "properties": {
              "experimentName": {
                "type": "string"
              },
              "pipelineName": {
                "type": "string"
              },
              "pipelineType": {
                "type": "string"
              },
              "algorithmName": {
                "type": "string"
              },
              "pipelineStatus": {
                "type": "string"
              },
              "datesRange": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "example": "2021-03-11T14:30:00"
                  },
                  "to": {
                    "type": "string",
                    "example": "2021-03-11T14:30:00"
                  }
                }
              }
            }
          },
          "cursor": {
            "type": "string",
            "description": "get the next results starting from this cursor"
          },
          "pageNum": {
            "type": "integer",
            "description": "get the next results starting from this page number"
          },
          "sort": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "desc"
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "default": 100,
            "example": 100,
            "description": "limit the result size"
          },
          "fields": {
            "type": "object",
            "description": "select which fields to return"
          },
          "exists": {
            "type": "object",
            "description": "only return records that has fields"
          }
        },
        "example": {
          "query": {
            "datesRange": {
              "from": "2021-05-22T15:00:00",
              "to": "2021-06-22T16:00:00"
            },
            "experimentName": "main",
            "pipelineName": "simple",
            "pipelineType": "stored",
            "algorithmName": "green-alg",
            "pipelineStatus": "completed"
          },
          "sort": "desc",
          "pageNum": 1,
          "limit": 2,
          "fields": {
            "jobId": true
          }
        }
      },
      "searchJobsResponse": {
        "type": "object",
        "properties": {
          "hits": {
            "type": "array",
            "description": "the actual result records",
            "items": {}
          },
          "cursor": {
            "type": "string",
            "description": "this cursor to the next query can be used for pagination"
          },
          "timeTook": {
            "type": "string",
            "description": "the query completion time took in milliseconds"
          }
        }
      },
      "rerun": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          }
        },
        "additionalProperties": false,
        "required": [
          "jobId"
        ]
      },
      "experiment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "experiment name",
            "default": "main",
            "minLength": 1,
            "maxLength": 32,
            "format": "experiment-name"
          },
          "description": {
            "type": "string",
            "description": "describe the experiment"
          }
        }
      },
      "experimentName": {
        "type": "string",
        "description": "experiment name",
        "default": "main",
        "minLength": 1,
        "maxLength": 32,
        "format": "experiment-name"
      },
      "gatewayName": {
        "type": "string",
        "description": "gateway name",
        "minLength": 1,
        "maxLength": 32,
        "format": "gateway-name"
      },
      "gateway": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "gateway name",
            "minLength": 1,
            "maxLength": 32,
            "format": "gateway-name"
          },
          "description": {
            "type": "string",
            "description": "describe the gateway"
          },
          "mem": {
            "type": "string",
            "description": "Memory allocated for streaming gateway",
            "format": "algorithm-memory",
            "default": "512Mi"
          },
          "cpu": {
            "type": "number",
            "description": "Cpu allocated for streaming gateway",
            "default": 0.5
          }
        }
      },
      "output": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "describe the output"
          },
          "mem": {
            "type": "string",
            "description": "Memory allocated for output",
            "format": "algorithm-memory",
            "default": "512Mi"
          }
        }
      },
      "hyperparamsTuner": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "gateway name",
            "minLength": 1,
            "maxLength": 32,
            "format": "gateway-name"
          },
          "description": {
            "type": "string",
            "description": "describe the gateway"
          },
          "mem": {
            "type": "string",
            "description": "Memory allocated for streaming gateway",
            "format": "algorithm-memory",
            "default": "512Mi"
          },
          "cpu": {
            "type": "number",
            "description": "Cpu allocated for streaming gateway",
            "default": 0.5
          }
        }
      },
      "hyperparamsTunerName": {
        "type": "string",
        "description": "gateway name",
        "minLength": 1,
        "maxLength": 32,
        "format": "gateway-name"
      },
      "hyperparamsTunerSpec": {
        "type": "object",
        "properties": {
          "numberOfTrials": {
            "type": "number",
            "description": "number Of Trials"
          },
          "hyperParams": {
            "type": "array",
            "description": "list of hyper params to optimize",
            "items": {
              "type": "object",
              "properties": {
                "suggest": {
                  "type": "string",
                  "enum": [
                    "uniform",
                    "loguniform",
                    "int",
                    "discrete_uniform",
                    "categorical"
                  ]
                },
                "low": {
                  "type": "number"
                },
                "hight": {
                  "type": "number"
                },
                "choices": {
                  "type": "array"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "suggest"
              ]
            }
          },
          "objectivePipeline": {
            "type": "string",
            "description": "Unique identifier representing a specific pipeline",
            "minLength": 1,
            "format": "pipeline-name"
          },
          "sampler": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "Grid",
                  "PartialFixed",
                  "Random",
                  "TPE",
                  "CmaEs"
                ]
              },
              "fixed_values": {
                "type": "object"
              },
              "search_space": {
                "type": "object"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "numberOfTrials",
          "objectivePipeline"
        ]
      },
      "hyperParams": {
        "type": "object",
        "properties": {
          "suggest": {
            "type": "string",
            "enum": [
              "uniform",
              "loguniform",
              "int",
              "discrete_uniform",
              "categorical"
            ]
          },
          "low": {
            "type": "number"
          },
          "hight": {
            "type": "number"
          },
          "choices": {
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "suggest"
        ]
      },
      "sampler": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "Grid",
              "PartialFixed",
              "Random",
              "TPE",
              "CmaEs"
            ]
          },
          "fixed_values": {
            "type": "object"
          },
          "search_space": {
            "type": "object"
          }
        },
        "required": [
          "name"
        ]
      },
      "clean": {
        "type": "object",
        "properties": {
          "maxAge": {
            "type": "integer",
            "description": "max age to clean (minutes)"
          }
        }
      },
      "gcError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "graphQuery": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "nodeName": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "from": {
            "type": "integer",
            "minimum": 0
          },
          "to": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "jobId"
        ]
      },
      "graphResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          },
          "timestamp": {
            "type": "number"
          },
          "edges": {
            "type": "array",
            "description": "Array of edges"
          },
          "nodes": {
            "type": "array",
            "description": "Array of nodes"
          }
        }
      },
      "options": {
        "type": "object",
        "properties": {
          "ttl": {
            "type": "integer",
            "description": "pipeline time to live in seconds",
            "minimum": 1,
            "default": 3600,
            "example": 3600
          },
          "batchTolerance": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "default": 80,
            "example": 80
          },
          "concurrentPipelines": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10000,
                "example": 1
              },
              "rejectOnFailure": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          },
          "progressVerbosityLevel": {
            "type": "string",
            "default": "info",
            "example": "info",
            "enum": [
              "trace",
              "debug",
              "info",
              "warn",
              "error",
              "critical"
            ]
          },
          "debugOverride": {
            "type": "array",
            "description": "A list of algorithms to debug in this execution",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "description": "optional properties"
      },
      "pipeline": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific pipeline",
            "minLength": 1,
            "format": "pipeline-name"
          },
          "kind": {
            "type": "string",
            "default": "batch",
            "example": "batch",
            "enum": [
              "batch",
              "stream"
            ]
          },
          "experimentName": {
            "type": "string",
            "description": "experiment name",
            "default": "main",
            "minLength": 1,
            "maxLength": 32,
            "format": "experiment-name"
          },
          "description": {
            "type": "string",
            "description": "pipeline description"
          },
          "nodes": {
            "type": "array",
            "description": "Array of nodes",
            "items": {
              "type": "object",
              "properties": {
                "nodeName": {
                  "type": "string",
                  "description": "Unique node identifier",
                  "minLength": 1
                },
                "algorithmName": {
                  "type": "string",
                  "description": "Unique identifier representing a specific algorithm",
                  "minLength": 1,
                  "maxLength": 32,
                  "format": "algorithm-name"
                },
                "input": {
                  "type": "array",
                  "description": "The input for the algorithm",
                  "items": {},
                  "default": []
                },
                "ttl": {
                  "type": "integer",
                  "description": "Algorithm execution time to live in seconds. 0 to disable",
                  "minimum": 0,
                  "example": 0
                },
                "includeInResult": {
                  "type": "boolean"
                },
                "metrics": {
                  "type": "object",
                  "properties": {
                    "tensorboard": {
                      "type": "boolean",
                      "description": "Should tensorboard metrics be collected."
                    }
                  }
                },
                "retry": {
                  "type": "object",
                  "properties": {
                    "policy": {
                      "type": "string",
                      "default": "OnCrash",
                      "enum": [
                        "Never",
                        "Always",
                        "OnError",
                        "OnCrash"
                      ]
                    },
                    "limit": {
                      "type": "integer",
                      "minimum": 1,
                      "default": 3,
                      "example": 1
                    }
                  }
                },
                "batchOperation": {
                  "type": "string",
                  "enum": [
                    "indexed",
                    "cartesian"
                  ]
                },
                "kind": {
                  "type": "string",
                  "default": "algorithm",
                  "enum": [
                    "algorithm",
                    "pipeline",
                    "debug",
                    "dataSource",
                    "gateway",
                    "output",
                    "hyperparamsTuner"
                  ]
                },
                "spec": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique identifier representing a specific pipeline",
                          "minLength": 1,
                          "format": "pipeline-name"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "gateway name",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "gateway-name"
                        },
                        "description": {
                          "type": "string",
                          "description": "describe the gateway"
                        },
                        "mem": {
                          "type": "string",
                          "description": "Memory allocated for streaming gateway",
                          "format": "algorithm-memory",
                          "default": "512Mi"
                        },
                        "cpu": {
                          "type": "number",
                          "description": "Cpu allocated for streaming gateway",
                          "default": 0.5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "snapshot": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "required": [
                        "name",
                        "snapshot"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "description": "describe the output"
                        },
                        "mem": {
                          "type": "string",
                          "description": "Memory allocated for output",
                          "format": "algorithm-memory",
                          "default": "512Mi"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "gateway name",
                          "minLength": 1,
                          "maxLength": 32,
                          "format": "gateway-name"
                        },
                        "description": {
                          "type": "string",
                          "description": "describe the gateway"
                        },
                        "mem": {
                          "type": "string",
                          "description": "Memory allocated for streaming gateway",
                          "format": "algorithm-memory",
                          "default": "512Mi"
                        },
                        "cpu": {
                          "type": "number",
                          "description": "Cpu allocated for streaming gateway",
                          "default": 0.5
                        }
                      }
                    }
                  ]
                }
              },
              "required": [
                "nodeName"
              ]
            }
          },
          "flowInput": {
            "type": "object",
            "nullable": true,
            "description": "input object"
          },
          "webhooks": {
            "type": "object",
            "properties": {
              "progress": {
                "type": "string",
                "format": "url",
                "minLength": 1,
                "description": "url to activate upon progress",
                "example": "http://my-url-to-progress"
              },
              "result": {
                "type": "string",
                "format": "url",
                "minLength": 1,
                "description": "url to activate upon result",
                "example": "http://my-url-to-result"
              }
            },
            "additionalProperties": false
          },
          "options": {
            "default": {},
            "type": "object",
            "properties": {
              "ttl": {
                "type": "integer",
                "description": "pipeline time to live in seconds",
                "minimum": 1,
                "default": 3600,
                "example": 3600
              },
              "batchTolerance": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 80,
                "example": 80
              },
              "concurrentPipelines": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10000,
                    "example": 1
                  },
                  "rejectOnFailure": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "additionalProperties": false
              },
              "progressVerbosityLevel": {
                "type": "string",
                "default": "info",
                "example": "info",
                "enum": [
                  "trace",
                  "debug",
                  "info",
                  "warn",
                  "error",
                  "critical"
                ]
              },
              "debugOverride": {
                "type": "array",
                "description": "A list of algorithms to debug in this execution",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            },
            "description": "optional properties"
          },
          "priority": {
            "default": 3,
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "example": 3
          },
          "triggers": {
            "type": "object",
            "properties": {
              "pipelines": {
                "type": "array",
                "description": "pipelines to activate upon result",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "uniqueItems": true
              },
              "cron": {
                "type": "object",
                "properties": {
                  "pattern": {
                    "type": "string",
                    "description": "cron job",
                    "minLength": 1,
                    "format": "cron"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "enable or disable cron job",
                    "default": false
                  }
                }
              }
            },
            "additionalProperties": false
          },
          "tags": {
            "type": "array",
            "description": "Array of tags",
            "items": {
              "type": "string",
              "description": "Unique identifier representing a specific tag",
              "minLength": 1,
              "maxLength": 32
            }
          },
          "rootJobId": {
            "type": "string",
            "description": "the root job id of the current tree"
          },
          "streaming": {
            "type": "object",
            "description": "streaming options",
            "properties": {
              "defaultFlow": {
                "type": "string",
                "description": "the name of the default stream flow"
              },
              "flows": {
                "type": "object",
                "description": "define streaming flows in simple syntax\nexample: node A stream to B and C, node B stream to D.\nit will be: A >> B&C | B >> D\n",
                "example": {
                  "main": "A >> B&C | B >> D | C >> E",
                  "second": "A >> B >> C"
                }
              }
            }
          },
          "edges": {
            "type": "array",
            "description": "edges define relation between nodes",
            "items": {},
            "example": [
              {
                "source": "A",
                "target": "B"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "pipelineName": {
        "type": "string",
        "description": "Unique identifier representing a specific pipeline",
        "minLength": 1,
        "format": "pipeline-name"
      },
      "kindPipeline": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier representing a specific pipeline",
            "minLength": 1,
            "format": "pipeline-name"
          }
        }
      },
      "pipelineKind": {
        "type": "string",
        "default": "batch",
        "example": "batch",
        "enum": [
          "batch",
          "stream"
        ]
      },
      "nodeKind": {
        "type": "string",
        "default": "algorithm",
        "enum": [
          "algorithm",
          "pipeline",
          "debug",
          "dataSource",
          "gateway",
          "output",
          "hyperparamsTuner"
        ]
      },
      "pipelineNode": {
        "type": "object",
        "properties": {
          "nodeName": {
            "type": "string",
            "description": "Unique node identifier",
            "minLength": 1
          },
          "algorithmName": {
            "type": "string",
            "description": "Unique identifier representing a specific algorithm",
            "minLength": 1,
            "maxLength": 32,
            "format": "algorithm-name"
          },
          "input": {
            "type": "array",
            "description": "The input for the algorithm",
            "items": {},
            "default": []
          },
          "ttl": {
            "type": "integer",
            "description": "Algorithm execution time to live in seconds. 0 to disable",
            "minimum": 0,
            "example": 0
          },
          "includeInResult": {
            "type": "boolean"
          },
          "metrics": {
            "type": "object",
            "properties": {
              "tensorboard": {
                "type": "boolean",
                "description": "Should tensorboard metrics be collected."
              }
            }
          },
          "retry": {
            "type": "object",
            "properties": {
              "policy": {
                "type": "string",
                "default": "OnCrash",
                "enum": [
                  "Never",
                  "Always",
                  "OnError",
                  "OnCrash"
                ]
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "default": 3,
                "example": 1
              }
            }
          },
          "batchOperation": {
            "type": "string",
            "enum": [
              "indexed",
              "cartesian"
            ]
          },
          "kind": {
            "type": "string",
            "default": "algorithm",
            "enum": [
              "algorithm",
              "pipeline",
              "debug",
              "dataSource",
              "gateway",
              "output",
              "hyperparamsTuner"
            ]
          },
          "spec": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique identifier representing a specific pipeline",
                    "minLength": 1,
                    "format": "pipeline-name"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "gateway name",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "gateway-name"
                  },
                  "description": {
                    "type": "string",
                    "description": "describe the gateway"
                  },
                  "mem": {
                    "type": "string",
                    "description": "Memory allocated for streaming gateway",
                    "format": "algorithm-memory",
                    "default": "512Mi"
                  },
                  "cpu": {
                    "type": "number",
                    "description": "Cpu allocated for streaming gateway",
                    "default": 0.5
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "snapshot": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "snapshot"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "describe the output"
                  },
                  "mem": {
                    "type": "string",
                    "description": "Memory allocated for output",
                    "format": "algorithm-memory",
                    "default": "512Mi"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "gateway name",
                    "minLength": 1,
                    "maxLength": 32,
                    "format": "gateway-name"
                  },
                  "description": {
                    "type": "string",
                    "description": "describe the gateway"
                  },
                  "mem": {
                    "type": "string",
                    "description": "Memory allocated for streaming gateway",
                    "format": "algorithm-memory",
                    "default": "512Mi"
                  },
                  "cpu": {
                    "type": "number",
                    "description": "Cpu allocated for streaming gateway",
                    "default": 0.5
                  }
                }
              }
            ]
          }
        },
        "required": [
          "nodeName"
        ]
      },
      "pipelineResult": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique identifier representing pipeline execution"
          },
          "timestamp": {
            "type": "string"
          },
          "pipeline": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {}
          },
          "status": {
            "type": "string"
          },
          "timeTook": {
            "type": "number"
          },
          "storageModule": {
            "type": "string"
          }
        }
      },
      "priority": {
        "type": "integer",
        "minimum": 1,
        "maximum": 5,
        "default": 3,
        "example": 3
      },
      "triggers": {
        "type": "object",
        "properties": {
          "pipelines": {
            "type": "array",
            "description": "pipelines to activate upon result",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "uniqueItems": true
          },
          "cron": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "cron job",
                "minLength": 1,
                "format": "cron"
              },
              "enabled": {
                "type": "boolean",
                "description": "enable or disable cron job",
                "default": false
              }
            }
          }
        },
        "additionalProperties": false
      },
      "pipelineTriggersNode": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pipeline name"
          },
          "children": {
            "type": "array",
            "items": {}
          }
        }
      },
      "pipelineTriggersResult": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Pipeline name"
            },
            "children": {
              "type": "array",
              "items": {}
            }
          }
        }
      },
      "codeApiPipelineRequest": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          }
        },
        "required": [
          "jobId",
          "taskId"
        ]
      },
      "webhookResult": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "pipelineStatus": {
            "type": "string"
          },
          "responseStatus": {
            "type": "string"
          },
          "httpResponse": {
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "string"
              },
              "statusMessage": {
                "type": "string"
              }
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "webhooks": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "string",
            "format": "url",
            "minLength": 1,
            "description": "url to activate upon progress",
            "example": "http://my-url-to-progress"
          },
          "result": {
            "type": "string",
            "format": "url",
            "minLength": 1,
            "description": "url to activate upon result",
            "example": "http://my-url-to-result"
          }
        },
        "additionalProperties": false
      },
      "githubWebhook": {
        "type": "object",
        "properties": {
          "github": {
            "type": "object",
            "description": "github object which received after push for more information https://developer.github.com/webhooks/"
          }
        }
      },
      "gitlabWebhook": {
        "type": "object",
        "properties": {
          "gitlab": {
            "type": "object",
            "description": "gitlab object which received after push for more information https://docs.gitlab.com/ee/user/project/integrations/webhooks.html"
          }
        }
      }
    },
    "parameters": {
      "nameParam": {
        "name": "name",
        "in": "path",
        "description": "A dataSource name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "idParam": {
        "name": "id",
        "in": "path",
        "description": "A datasource id (indicating a version)",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "snapshotNameParam": {
        "name": "snapshotName",
        "in": "path",
        "description": "A Snapshot name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "snapshotNameQuery": {
        "name": "snapshot_name",
        "in": "query",
        "description": "A Snapshot name",
        "schema": {
          "type": "string"
        }
      },
      "nameQuery": {
        "name": "datasource_name",
        "in": "query",
        "description": "a datasource name",
        "schema": {
          "type": "string"
        }
      },
      "idQuery": {
        "name": "id",
        "in": "query",
        "description": "request a specific version, if not stated the latest is returned",
        "schema": {
          "type": "string"
        }
      },
      "idQueryRequired": {
        "name": "id",
        "in": "query",
        "description": "request a specific version, if not stated the latest is returned",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "downloadIdQuery": {
        "name": "id",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Unique identifier representing a downloadId",
          "minLength": 4,
          "maxLength": 4,
          "format": "download-id"
        }
      }
    }
  }
}