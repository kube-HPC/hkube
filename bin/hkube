#!/usr/bin/env node
var argv = require('minimist')(process.argv.slice(2));
const clone = require('../clone');
const pull = require('../pull');
const npm = require('../npm');
const minikube = require('../minikube/minikube');
const pack = require('../deployment/pack')
const deploy = require('../deployment/deploy')
const package = require('../package.json')
const meow = require('meow');
const colors = require('colors');
const kubernetesApi = require('../minikube/kubernetes-api');
const expandTilde = require('expand-tilde');
const { FOLDERS } = require('./../consts.js');

const usage = `
        Usage
    ------------
    main:
        $ --version, return current hkube version
        $ --help,-h return usage information
        $ --kubeConfig path to the kubectl config for the cluster
        $ --hkubeFolder path to internal downloaded folder. defaults to ~/.hkube
    
    git:
        $ clone ,c <options> default --all
        $ pull ,p  <options> default --all
        $ npm ,n <options> default --all
        $ cloneWithNpm, cwn <options> default --all 
        $ pullWithNpm, pwn <options>  default --all

        Options
        
            --dev,-d  Include only hkube folder
            --common,-c Include only hkube-common folder
            --all,-a Includes  hkube and hkube-common folder
    pack:
        $ pack <options>
        Options:
            --core, -c saves all core yamls and docker images in ~/.hkube
            --thirdParty, -t saves all third party docker images in ~/.hkube/thirdParty
            --source, -s clones the sources of the repos, and checkout the correct version
            
    minikube:

        $ minikube, m <options>
        
        Options
        
            --init,-i get all prerequisite for running minikube
            --start,-s running hkube on minikube 
            --restart,-r stop and run minikube
            --update,-u stop and run minikube
            --build,-b init and then start minikube
            --apply,-a  reload hkube core modules, optionally also supply version (semver)
            --thirdParty,-t  reload hkube thirdParty modules
            
        `

if (argv.kubeConfig) {
    const kubeConfig = expandTilde(argv.kubeConfig);
    console.log(`using kubectl config file ${kubeConfig}`.green)
    kubernetesApi.kubeConfigFile = kubeConfig
    delete argv.kubeConfig
}

if (argv.hkubeFolder) {
    FOLDERS.hkube = argv.hkubeFolder;
    delete argv.hkubeFolder;
}
if (argv.version) {
    console.log(`version: ${package.version}`.green)
}
else if (argv.help || argv.h) {
    console.log(usage.cyan);
}
else {
    switch (argv._[0]) {
        case 'clone':
        case 'c':
            clone(Object.keys(argv)[1]);
            break;
        case 'pull':
        case 'p':
            pull(Object.keys(argv)[1]);
            break;
        case 'npm':
        case 'n':
            npm(Object.keys(argv)[1]);
            break;
        case 'cloneWithNpm':
        case 'cwn':
            clone(Object.keys(argv)[1]).then(res => {
                npm(Object.keys(argv)[1]);
            });
            break;
        case 'pullWithNpm':
        case 'pwn':
            pull(Object.keys(argv)[1]).then(res => {
                npm(Object.keys(argv)[1]);
            });
            break;
        case 'minikube':
        case 'm':
            minikube(Object.entries(argv).slice(1));
            break;
        case 'pack':
            pack(Object.entries(argv).slice(1));
            break;
        case 'deploy':
            delete argv._;
            deploy(argv);
            break;
        default:
            console.log(usage.cyan);

    }
}