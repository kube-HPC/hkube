#!/usr/bin/env node
var argv = require('minimist')(process.argv.slice(2));
const clone = require('../clone');
const pull = require('../pull');
const npm = require('../npm');
const minikube = require('../minikube/minikube');
const package = require('../package.json')
const meow = require('meow');
const colors = require('colors');
const usage = `
        Usage
    ------------__
        $ --version,-v return current hkube version
        $ --help,-h return usage information
        
        $ clone ,c <options> default --all
        $ pull ,p  <options> default --all
        $ npm ,n <options> default --all
        $ cloneWithNpm, cwn <options> default --all 
        $ pullWithNpm, pwn <options>  default --all

        Options
        
            --dev,-d  Include only hkube folder
            --common,-c Include only hkube-common folder
            --all,-a Includes  hkube and hkube-common folder
        
        $ minikube, m <options>
        
        Options
        
            --init,-i get all prerequisite for running minikube
            --start,-s running hkube on minikube 
            --restart,-r stop and run minikube
            --update,-u stop and run minikube
            --build,-b init and then start minikube
            --apply,-a  reload hkube core modules
            
        `

if (argv.version || argv.v) {
    console.log(`version: ${package.version}`.green)
}
else if (argv.help || argv.h) {
    console.log(usage.cyan);
}
else {
    switch (argv._[0]) {
        case 'clone':
        case 'c':
            clone(Object.keys(argv)[1]);
            break;
        case 'pull':
        case 'p':
            pull(Object.keys(argv)[1]);
            break;
        case 'npm':
        case 'n':
            npm(Object.keys(argv)[1]);
            break;
        case 'cloneWithNpm':
        case 'cwn':
            clone(Object.keys(argv)[1]).then(res => {
                npm(Object.keys(argv)[1]);
            });
            break;
        case 'pullWithNpm':
        case 'pwn':
            pull(Object.keys(argv)[1]).then(res => {
                npm(Object.keys(argv)[1]);
            });
            break;
        case `minikube`:
        case 'm':
            minikube(Object.keys(argv)[1]);
            break;
        default:
            console.log(usage.cyan);

    }
}